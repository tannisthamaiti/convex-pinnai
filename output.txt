Repository Structure:
==================================================
├── .env.local
├── .gitignore
├── eslint.config.js
├── index.html
├── middleware.js
├── postcss.config.js
├── src
│   ├── App.css
│   ├── App.jsx
│   ├── ErrorBoundary.jsx
│   ├── assets
│   │   ├── react.svg
│   ├── components
│   │   ├── Footer.jsx
│   │   ├── ModelTrainingModal.jsx
│   │   ├── Navbar.jsx
│   │   ├── RequireAuth.jsx
│   │   ├── WorkflowStepper.jsx
│   ├── index.css
│   ├── main.jsx
│   ├── pages
│   │   ├── AnalysedDataViewer.jsx
│   │   ├── Analysis.jsx
│   │   ├── AskImageQuestion.jsx
│   │   ├── ClassificationAgent.jsx
│   │   ├── CloudSiloSetup.jsx
│   │   ├── ConvexChat.jsx
│   │   ├── Dashboard.jsx
│   │   ├── DataSelection.jsx
│   │   ├── DataUpload.jsx
│   │   ├── DigitalTwin.jsx
│   │   ├── DualSurfacePlot.jsx
│   │   ├── FieldDetailsModal.jsx
│   │   ├── Landing.jsx
│   │   ├── Privacy.jsx
│   │   ├── ProductionDataViewer.jsx
│   │   ├── ROIModal.css
│   │   ├── ROIModal.jsx
│   │   ├── RawDataViewer.jsx
│   │   ├── Register.jsx
│   │   ├── Results.jsx
│   │   ├── StorageSelection.jsx
│   │   ├── SupervisedAnalysisViewer.jsx
│   │   ├── SurfacePlot.jsx
│   │   ├── TableA5View.jsx
│   │   ├── Terms.jsx
│   │   ├── TexasMap.jsx
│   │   ├── TierSelection.jsx
│   │   ├── VendorMap.jsx
│   │   ├── VoxelTabViewer.jsx
│   │   ├── VoxelViewer.jsx
│   │   ├── VoxelViewerCore.jsx
│   │   ├── VoxelViewerRaw.jsx
│   │   ├── WellLocation.jsx
│   │   ├── WellMap.jsx
│   │   ├── cursor-scope.md
│   │   ├── scope.md
│   │   ├── upload-form.jsx
│   ├── utils.js
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── vercel.json
└── vite.config.js

==================================================

File: .env.local
==================================================
# Deployment used by `npx convex dev`
CONVEX_DEPLOYMENT=dev:graceful-hornet-598 # team: tannisthamaiti, project: convex-tutorial-c1832

VITE_CONVEX_URL=https://graceful-hornet-598.convex.cloud


VITE_AUTH0_DOMAIN=dev-nur7p870riagl773.us.auth0.com            # Replace with your domain
VITE_AUTH0_CLIENT_ID=551676775863-7fu5t08f9bb4ouplh7mjdcih0dtbj3or.apps.googleusercontent.com             # From Auth0 Application
VITE_AUTH0_CALLBACK_URL=http://209.38.138.215:8000         # Your local frontend
VITE_CLERK_PUBLISHABLE_KEY=pk_test_ZGVlcC10YWRwb2xlLTkzLmNsZXJrLmFjY291bnRzLmRldiQ
CLERK_SECRET_KEY=sk_test_98VcX3IYnnl0WFJdjSP5CMMW1kwypHdOv08NHmmBMd
CLERK_JWT_ISSUER_DOMAIN=https://deep-tadpole-93.clerk.accounts.dev


--------------------------------------------------

File: index.html
==================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

--------------------------------------------------

File: tsconfig.app.json
==================================================
{
  "compilerOptions": {
    // ...
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
    // ...
  }
}
--------------------------------------------------

File: tsconfig.json
==================================================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
--------------------------------------------------

File: middleware.js
==================================================
export const config = {
  matcher: '/:path*',
}

export default function middleware(req) {
  const basicAuth = req.headers.get('authorization')

  if (basicAuth) {
    const auth = basicAuth.split(' ')[1]
    const [user, pwd] = atob(auth).split(':')

    // Replace 'your-password' with your chosen password
    if (pwd === process.env.SITE_PASSWORD) {
      return
    }
  }

  return new Response('Authentication required', {
    status: 401,
    headers: {
      'WWW-Authenticate': 'Basic realm="Secure Area"',
    },
  })
}

--------------------------------------------------

File: vite.config.js
==================================================
import { defineConfig } from "vite"
import react from "@vitejs/plugin-react"
import path from "path"
import tailwindcss from "@tailwindcss/vite"

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
  server: {
    host: '0.0.0.0',
    port: 8080
  },
  css: {
    modules: false
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    minify: false, // 🧠 Disable minification to reduce memory usage
  }
})

--------------------------------------------------

File: .gitignore
==================================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

--------------------------------------------------

File: eslint.config.js
==================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--------------------------------------------------

File: tailwind.config.js
==================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx}",  // Include all JS/TS files in src
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


--------------------------------------------------

File: vercel.json
==================================================
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": { "distDir": "dist" }
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ]
}

--------------------------------------------------

File: postcss.config.js
==================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--------------------------------------------------

File: src/App.jsx
==================================================
// App.jsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { ClerkProvider } from "@clerk/clerk-react";

import Landing              from "./pages/Landing";
import Register             from "./pages/Register";
import TierSelection        from "./pages/TierSelection";
import StorageSelection     from "./pages/StorageSelection";
import DataUpload           from "./pages/DataSelection";
import FieldDetailsModal    from "./pages/FieldDetailsModal";
import VendorMap            from "./pages/VendorMap";
import DigitalTwin          from "./pages/DigitalTwin";
import ClassificationAgent  from "./pages/ClassificationAgent";
import AskImageQuestion     from "./pages/AskImageQuestion";
import VoxelTabViewer       from "./pages/VoxelTabViewer";
import TableA5View          from "./pages/TableA5View";
import Dashboard            from "./pages/Dashboard";
import WellMap              from "./pages/WellMap";
import ROIModal             from "./pages/ROIModal";
import ConvexChat           from "./pages/ConvexChat";
import TexasMap             from "./pages/TexasMap";
import Privacy              from "./pages/Privacy";
import Terms                from "./pages/Terms";
import CloudSiloSetup       from "./pages/CloudSiloSetup";

import Navbar          from "./components/Navbar";
import WorkflowStepper from "./components/WorkflowStepper";
import Footer          from "./components/Footer";
import RequireAuth     from "./components/RequireAuth";

import "./index.css";
import "./App.css";

export default function App() {
  return (
    
      <Router>
        <div className="app-container">
          {/* ----- Header (hidden until login) ----- */}
          <RequireAuth>
            <Navbar />
            <WorkflowStepper />
          </RequireAuth>

          {/* ----- Routed pages ----- */}
          <main className="main-content">
            <Routes>
              {/* 🔓 PUBLIC */}
              <Route path="/" element={<Landing />} />

              {/* 🔐 PROTECTED – wrap EACH element in <RequireAuth> */}
              <Route
                path="/register"
                element={
                  <RequireAuth>
                    <Register />
                  </RequireAuth>
                }
              />
              <Route
                path="/tiers"
                element={
                  <RequireAuth>
                    <TierSelection />
                  </RequireAuth>
                }
              />
              <Route
                path="/storage"
                element={
                  <RequireAuth>
                    <StorageSelection />
                  </RequireAuth>
                }
              />
              <Route
                path="/upload"
                element={
                  <RequireAuth>
                    <DataUpload />
                  </RequireAuth>
                }
              />
              <Route
                path="/roi"
                element={
                  <RequireAuth>
                    <ROIModal />
                  </RequireAuth>
                }
              />
              <Route
                path="/vendor"
                element={
                  <RequireAuth>
                    <VendorMap />
                  </RequireAuth>
                }
              />
              <Route
                path="/dashboard"
                element={
                  <RequireAuth>
                    <Dashboard />
                  </RequireAuth>
                }
              />
              <Route
                path="/well-map"
                element={
                  <RequireAuth>
                    <WellMap />
                  </RequireAuth>
                }
              />
              <Route
                path="/voxel"
                element={
                  <RequireAuth>
                    <VoxelTabViewer />
                  </RequireAuth>
                }
              />
              <Route
                path="/convex-chat"
                element={
                  <RequireAuth>
                    <ConvexChat />
                  </RequireAuth>
                }
              />
              <Route
                path="/classification-agent"
                element={
                  <RequireAuth>
                    <ClassificationAgent />
                  </RequireAuth>
                }
              />
              <Route
                path="/ask-image"
                element={
                  <RequireAuth>
                    <AskImageQuestion />
                  </RequireAuth>
                }
              />
              <Route
                path="/digital-twin"
                element={
                  <RequireAuth>
                    <DigitalTwin />
                  </RequireAuth>
                }
              />
              <Route
                path="/TableA5View"
                element={
                  <RequireAuth>
                    <TableA5View />
                  </RequireAuth>
                }
              />
              <Route
                path="/texasmap"
                element={
                  <RequireAuth>
                    <TexasMap />
                  </RequireAuth>
                }
              />
              <Route
                path="/privacy"
                element={
                  <RequireAuth>
                    <Privacy />
                  </RequireAuth>
                }
              />
              <Route
                path="/terms"
                element={
                  <RequireAuth>
                    <Terms />
                  </RequireAuth>
                }
              />
              <Route
                path="/cloud-setup"
                element={
                  <RequireAuth>
                    <CloudSiloSetup />
                  </RequireAuth>
                }
              />
              <Route
                path="/FieldDetailsModal"
                element={
                  <RequireAuth>
                    <FieldDetailsModal />
                  </RequireAuth>
                }
              />
            </Routes>
          </main>

          {/* ----- Footer (hidden until login) ----- */}
          <RequireAuth>
            <Footer />
          </RequireAuth>
        </div>
      </Router>
    
  );
}

--------------------------------------------------

File: src/ErrorBoundary.jsx
==================================================
import React, { Component } from "react";

// NOTE: Once you get Clerk working you can simplify this error boundary
// or remove it entirely.
export class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { error: null };
  }

  static getDerivedStateFromError(error) {
    const errorText = "" + error?.toString?.();
    if (
      errorText.includes("@clerk/clerk-react") &&
      errorText.includes("publishableKey")
    ) {
      const match = errorText.match(/https:\S+/) || [];
      const clerkDashboardUrl = match[0];
      const trimmedClerkDashboardUrl = clerkDashboardUrl?.endsWith(".")
        ? clerkDashboardUrl.slice(0, -1)
        : clerkDashboardUrl;

      return {
        error: (
          <>
            <p>
              Add{" "}
              <code>
                VITE_CLERK_PUBLISHABLE_KEY="{"<"}your publishable key{">"}"
              </code>{" "}
              to the <code>.env.local</code> file
            </p>
            {clerkDashboardUrl ? (
              <p>
                You can find it at{" "}
                <a
                  className="underline hover:no-underline"
                  href={trimmedClerkDashboardUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {trimmedClerkDashboardUrl}
                </a>
              </p>
            ) : null}
            <p className="pl-8 text-sm font-mono">Raw error: {errorText}</p>
          </>
        ),
      };
    }

    return { error: <p>{errorText}</p> };
  }

  componentDidCatch() {
    // Optional: Log error to an error reporting service
  }

  render() {
    if (this.state.error !== null) {
      return (
        <div className="bg-red-500/20 border border-red-500/50 p-8 flex flex-col gap-4 container mx-auto">
          <h1 className="text-xl font-bold">Caught an error while rendering:</h1>
          {this.state.error}
        </div>
      );
    }

    return this.props.children;
  }
}

--------------------------------------------------

File: src/main.jsx
==================================================
import React, { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import { ClerkProvider, useAuth } from "@clerk/clerk-react";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";
import "./index.css";
import App from "./App";
import { ErrorBoundary } from "./ErrorBoundary";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL);

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <ErrorBoundary>
      <ClerkProvider publishableKey={import.meta.env.VITE_CLERK_PUBLISHABLE_KEY}>
        <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
          <App />
        </ConvexProviderWithClerk>
      </ClerkProvider>
    </ErrorBoundary>
  </StrictMode>
);

--------------------------------------------------

File: src/App.css
==================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

/* Layout */
.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: var(--background-color);
}

.main-content {
  flex: 1;
  padding: 20px;
  margin-top: 60px; /* Space for fixed navbar */
}

/* Navbar Styles */
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 60px;
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 2rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 1000;
}

.navbar-logo {
  display: flex;
  align-items: center;
}

.navbar-links {
  display: flex;
  gap: 1rem;
}

.nav-link {
  background: none;
  border: none;
  padding: 0.5rem 1rem;
  color: var(--text-color);
  font-size: 1rem;
  cursor: pointer;
  transition: color 0.3s ease;
}

.nav-link:hover {
  color: var(--secondary-color);
}

.nav-link.active {
  color: var(--secondary-color);
  font-weight: 500;
}

/* Footer Styles */
.footer {
  background-color: white;
  padding: 1rem;
  text-align: center;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
}

.footer-content {
  color: var(--text-color);
  font-size: 0.9rem;
}

/* Landing Page Styles */
.landing-page {
  min-height: calc(100vh - 60px); /* Subtract navbar height */
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  background-color: var(--background-color);
  margin-top: 60px; /* Add margin to account for fixed navbar */
}

.landing-container {
  width: 100%;
  max-width: 600px;
  margin: 0 auto;
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}

.landing-content {
  background-color: white;
  padding: 3rem;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
}

.logo-container {
  margin-bottom: 2rem;
}

.tagline {
  font-size: 1.5rem;
  color: var(--text-color);
  margin: 1.5rem 0 2rem;
}

.register-button {
  font-size: 1.2rem;
  padding: 1rem 2.5rem;
  background-color: var(--secondary-color);
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.register-button:hover {
  background-color: var(--hover-color);
}

.logo {
  max-width: 200px;
  height: auto;
  margin: 0 auto;
}

/* Form Styles */
.register-form-container {
  max-width: 600px;
  margin: 2rem auto;
  padding: 2rem;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  text-align: left;
}

.register-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.form-group label {
  color: var(--text-color);
  font-weight: 500;
  font-size: 0.9rem;
}

.form-group input {
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  font-size: 1rem;
  width: 100%;
  transition: border-color 0.3s ease;
}

.form-group input:focus {
  outline: none;
  border-color: var(--secondary-color);
  box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
}

.register-form button[type="submit"] {
  margin-top: 1rem;
  width: 100%;
}

/* Terms and Privacy Styles */
.terms-container {
  margin-top: 1.5rem;
  padding: 1rem;
  background-color: #f8fafc;
  border-radius: 6px;
}

.checkbox-group {
  display: flex;
  align-items: flex-start;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}

.terms-checkbox {
  margin-top: 0.25rem;
}

.terms-label {
  font-size: 0.9rem;
  color: var(--text-color);
  line-height: 1.4;
}

.terms-link {
  color: var(--secondary-color);
  text-decoration: underline;
  cursor: pointer;
}

.terms-link:hover {
  color: var(--hover-color);
}

.terms-error-message {
  color: #dc2626;
  font-size: 0.95rem;
  margin-top: 0.5rem;
  font-weight: 500;
  text-align: left;
  padding: 0.5rem;
  background-color: #fee2e2;
  border-radius: 4px;
  border: 1px solid #fecaca;
}

.button-disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

/* Required field styles */
.required {
  color: #E53E3E;
  margin-left: 4px;
}

.form-group input:required {
  border-left: 3px solid var(--secondary-color);
}

.form-group input:invalid {
  border-color: #E53E3E;
}

.form-group input:required:focus:valid {
  border-color: #48BB78;
}

.form-group input:invalid:not(:placeholder-shown) {
  border-color: #E53E3E;
}

.form-group input:valid:not(:placeholder-shown) {
  border-color: #48BB78;
}

/* Common Page Container Style */
.page-container {
  max-width: 1600px;
  margin: 0 auto;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: white;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Common Section Style */
.section {
  margin-bottom: 2rem;
  padding: 1.5rem;
  background-color: white;
  border-radius: 8px;
}

/* Common Text Styles */
h1, h2, h3 {
  color: var(--primary-color);
  margin-bottom: 1rem;
}

h1 {
  font-size: 2.5rem;
}

h2 {
  font-size: 2rem;
}

h3 {
  font-size: 1.5rem;
}

/* Common Button Style */
.button {
  background-color: var(--secondary-color);
  color: white;
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.button:hover {
  background-color: var(--hover-color);
}

.button:disabled {
  opacity: 0.7;
  cursor: wait;
}

/* Add these to your existing App.css */
.option-container {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  margin-bottom: 1.5rem;
  padding: 1rem;
  background-color: #f8fafc;
  border-radius: 6px;
}

.option-radio {
  margin-top: 0.25rem;
  width: 1.2rem;
  height: 1.2rem;
  cursor: pointer;
}

.option-label {
  font-size: 1.1rem;
  font-weight: 500;
  color: var(--primary-color);
  cursor: pointer;
}

.cloud-description {
  margin-left: 2.2rem;
  line-height: 1.6;
  color: var(--text-color);
}

/* Update the instruction-list style */
.instruction-list {
  list-style-type: decimal;
  padding-left: 2rem;
  margin: 1.5rem 0;
}

.instruction-list li {
  margin-bottom: 1rem;
  line-height: 1.6;
  color: var(--text-color);
  text-align: left;
}

/* Add to your existing styles */
.info-text {
  text-align: center;
  margin-bottom: 2rem;
  color: var(--text-color);
  max-width: 600px;
  line-height: 1.6;
}

.remove-file-button {
  background: none;
  border: none;
  color: #ef4444;
  cursor: pointer;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.remove-file-button:hover {
  background-color: #fee2e2;
}

.remove-file-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Processing spinner */
.processing-container {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.spinner {
  width: 1.5rem;
  height: 1.5rem;
  border: 3px solid transparent;
  border-top-color: white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Disabled state styles */
button:disabled {
  opacity: 0.7;
  cursor: wait;
}

.file-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem;
  background-color: #fff;
  margin-bottom: 0.5rem;
  border-radius: 4px;
  border: 1px solid #e2e8f0;
  transition: background-color 0.2s;
}

.file-item:hover {
  background-color: #f8fafc;
}

/* Base Variables */
:root {
  --primary-color: #2A4365;
  --secondary-color: #4A90E2;
  --background-color: #F7FAFC;
  --text-color: #2D3748;
  --hover-color: #3182CE;
}

/* File Upload Styles */
.upload-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.selected-files-container {
  width: 100%;
  max-width: 600px;
  margin-top: 1rem;
}

.file-list {
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 6px;
  padding: 1rem;
  max-height: 300px;
  overflow-y: auto;
}

/* File Summary Styles */
.file-summary {
  margin-top: 1rem;
}

.file-type-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 1rem;
  margin-top: 1rem;
}

.file-type-card {
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  transition: transform 0.2s, box-shadow 0.2s;
}

.file-type-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.file-type-icon {
  background-color: var(--primary-color);
  color: white;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  font-size: 0.9rem;
  font-weight: 500;
  margin-bottom: 0.5rem;
}

.file-type-details {
  text-align: center;
}

.file-count {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--primary-color);
  display: block;
}

.file-label {
  font-size: 0.9rem;
  color: var(--text-color);
}

.no-files {
  color: var(--text-color);
  text-align: center;
  padding: 2rem;
  background-color: #f8fafc;
  border-radius: 8px;
  border: 1px dashed #e2e8f0;
}

/* Cloud Silo Setup Styles */
.info-box {
  background-color: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1.5rem 0;
}

.info-box h3 {
  color: var(--primary-color);
  margin-bottom: 1rem;
  font-size: 1.1rem;
}

.info-box ul {
  list-style-type: none;
  padding: 0;
}

.info-box li {
  margin-bottom: 0.5rem;
  padding-left: 1.5rem;
  position: relative;
}

.info-box li:before {
  content: "•";
  color: var(--secondary-color);
  position: absolute;
  left: 0;
}

.confirmation-message {
  text-align: center;
  padding: 2rem;
}

.confirmation-message h2 {
  margin: 1rem 0;
  color: var(--primary-color);
}

.confirmation-message p {
  color: var(--text-color);
  max-width: 500px;
  margin: 0 auto;
}

/* Auto-populated field styles */
.auto-populated {
  background-color: #f8fafc;
  border-color: #e2e8f0;
}

.auto-populated:focus {
  background-color: #ffffff;
}

.info-text {
  color: var(--text-color);
  margin-bottom: 2rem;
  line-height: 1.6;
  font-size: 1.1rem;
}

/* Tier Selection Styles */
.tiers-container {
  display: grid;
  grid-template-columns: repeat(3, minmax(400px, 1fr));
  gap: 2rem;
  margin: 2rem auto;
  padding: 0 1rem;
  max-width: 1600px;
  justify-content: center;
}

.tier-option {
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  padding: 1.5rem;
  transition: transform 0.2s, box-shadow 0.2s;
  min-width: 400px;
  width: 100%;
  text-align: center;
}

.tier-option:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.tier-header {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e2e8f0;
}

.tier-radio {
  margin-top: 0.5rem;
  width: 1.2rem;
  height: 1.2rem;
  cursor: pointer;
}

.tier-label {
  flex: 1;
  cursor: pointer;
}

.tier-label h2 {
  margin: 0;
  color: var(--primary-color);
  font-size: 1.5rem;
}

.tier-limit {
  color: var(--secondary-color);
  font-size: 1.1rem;
  margin: 0.5rem 0 0;
}

.tier-content {
  color: var(--text-color);
}

.tier-features {
  list-style-type: none;
  padding: 0;
  margin: 1rem 0 0;
  text-align: center;
}

.tier-features li {
  margin-bottom: 0.5rem;
  padding-left: 1.5rem;
  position: relative;
}

.tier-features li:before {
  content: "✓";
  position: absolute;
  left: 0;
  color: var(--secondary-color);
}

/* Tooltip Styles */
.feature-with-tooltip {
  display: flex !important;
  align-items: center;
  gap: 0.5rem;
}

.tooltip {
  position: relative;
  display: inline-block;
}

.tooltip-trigger {
  color: var(--secondary-color);
  cursor: help;
  font-size: 0.9rem;
  padding: 0 0.25rem;
}

.tooltip-content {
  visibility: hidden;
  position: absolute;
  bottom: 125%;
  left: 50%;
  transform: translateX(-50%);
  background-color: #2d3748;
  color: white;
  text-align: left;
  padding: 0.75rem 1rem;
  border-radius: 6px;
  width: max-content;
  max-width: 300px;
  font-size: 0.875rem;
  line-height: 1.4;
  z-index: 1;
  opacity: 0;
  transition: opacity 0.2s;
  white-space: pre-line;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.tooltip-content::after {
  content: "";
  position: absolute;
  top: 100%;
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: #2d3748 transparent transparent transparent;
}

.tooltip:hover .tooltip-content {
  visibility: visible;
  opacity: 1;
}

@keyframes tooltipFade {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(5px);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

.tooltip:hover .tooltip-content {
  animation: tooltipFade 0.2s ease-in-out;
}

/* Center the continue button container */
.text-center {
  width: 100%;
  display: flex;
  justify-content: center;
  margin-top: 2rem;
}


/* DESTINATION: vite-project/src/App.css
   ADD THIS TO YOUR EXISTING App.css FILE */

   /* Add to App.css if not already there */
[style*="position: relative"]:hover > [style*="position: absolute"] {
  opacity: 1 !important;
  visibility: visible !important;
}

/* Updated container structure */
.data-selection-container {
  display: flex;
  min-height: 100vh;
  padding: 2rem;
  gap: 2rem;
}

/* Sidebar */
.data-sidebar {
  width: 30%;
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.data-sidebar h2 {
  font-size: 1.8rem;
  margin-bottom: 2rem;
}

/* Button */
.data-upload-btn {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--secondary-color);
  color: white;
  padding: 0.8rem 1.2rem;
  border-radius: 25px;
  font-size: 1rem;
  cursor: pointer;
  border: none;
  transition: background 0.3s ease;
}

.data-upload-btn:hover {
  background: var(--hover-color);
}

.data-upload-btn .icon {
  background: white;
  color: black;
  border-radius: 50%;
  padding: 0.2rem 0.5rem;
  font-weight: bold;
}

/* Main content area */
.data-main-content {
  width: 70%;
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.data-section {
  margin-bottom: 2rem;
}

.data-section h3 {
  font-size: 1.2rem;
  border-bottom: 1px solid #ccc;
  padding-bottom: 0.3rem;
  margin-bottom: 1rem;
}

.data-file-card {
  background: #f0f0f0;
  padding: 1rem;
  border-radius: 8px;
  margin-bottom: 1rem;
}

/* Modal styles */
.data-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  height: 100vh;
  width: 100vw;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.data-modal {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  width: 400px;
  max-height: 80vh;
  overflow-y: auto;
  position: relative;
}
--------------------------------------------------

File: src/index.css
==================================================
@tailwind base;
@tailwind components;
@tailwind utilities;
--------------------------------------------------

File: src/utils.js
==================================================
export const getFileExtension = (filename) => {
  return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2).toLowerCase();
};

export const groupFilesByType = (files) => {
  const groupedFiles = {};
  files.forEach(file => {
    const ext = getFileExtension(file.name);
    groupedFiles[ext] = (groupedFiles[ext] || 0) + 1;
  });
  return groupedFiles;
};

--------------------------------------------------

File: src/assets/react.svg
==================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
--------------------------------------------------

File: src/components/Footer.jsx
==================================================
export default function Footer() {
  const currentYear = new Date().getFullYear();

  return (
    <footer className="footer">
      <div className="footer-content">
       
        <p>Copyright © {currentYear} PINN AI. All rights reserved.</p>
      </div>
    </footer>
  );
}

--------------------------------------------------

File: src/components/WorkflowStepper.jsx
==================================================
// DESTINATION: vite-project/src/components/WorkflowStepper.jsx
// REPLACE ENTIRE FILE WITH THIS CODE

import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';

const WorkflowStepper = () => {
  const location = useLocation();
  const [isExpanded, setIsExpanded] = useState(true);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  const steps = [
    { 
      label: 'Registration', 
      path: '/register', 
      icon: '👤',
      tooltip: 'Create your account to get started',
      estimatedTime: '2 min'
    },
    { 
      label: 'Select Tier', 
      path: '/tiers', 
      icon: '📊',
      tooltip: 'Choose the package that fits your needs',
      estimatedTime: '1 min'
    },
    { 
      label: 'Storage Option', 
      path: '/storage', 
      icon: '🔒',
      tooltip: 'Select how to securely store your data',
      estimatedTime: '1 min'
    },
    { 
      label: 'Data Selection', 
      path: '/upload', 
      icon: '📁',
      tooltip: 'Choose the files for analysis',
      estimatedTime: '3-5 min'
    },
    { 
      label: 'Vendor Map', 
      path: '/vendor', 
      icon: '🗺️',
      tooltip: 'View available third-party data',
      estimatedTime: '2 min'
    },
    { 
      label: 'Dashboard', 
      path: '/dashboard', 
      icon: '📈',
      tooltip: 'View your analysis results',
      estimatedTime: '1 min'
    }
  ];

  // Don't show on landing page
  if (location.pathname === '/') {
    return null;
  }

  // Calculate current step index
  const currentStepIndex = steps.findIndex(step => step.path === location.pathname);

  const containerStyle = {
    position: 'fixed',
    ...(isMobile ? {
      bottom: 0,
      left: 0,
      right: 0,
      top: 'auto',
      transform: 'none',
      borderRadius: isExpanded ? '12px 12px 0 0' : '12px',
      margin: isExpanded ? '0' : '0 1rem 1rem 1rem',
    } : {
      left: isExpanded ? '2rem' : '0.5rem',
      top: '50%',
      transform: 'translateY(-50%)',
      borderRadius: '12px',
    }),
    backgroundColor: 'white',
    padding: isExpanded ? '1.5rem' : '0.5rem',
    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
    zIndex: 100,
    transition: 'all 0.3s ease',
    display: 'flex',
    flexDirection: isMobile ? 'column' : 'row',
    alignItems: isMobile ? 'stretch' : 'flex-start',
    gap: '1rem'
  };

  return (
    <div style={containerStyle}>
      <button
        onClick={() => setIsExpanded(!isExpanded)}
        style={{
          border: 'none',
          backgroundColor: 'var(--secondary-color)',
          color: 'white',
          width: isMobile ? '100%' : '24px',
          height: '24px',
          borderRadius: isMobile ? '4px' : '50%',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          padding: 0,
          fontSize: '14px'
        }}
      >
        {isMobile ? (isExpanded ? '↓ Hide Steps' : '↑ Show Steps') : (isExpanded ? '←' : '→')}
      </button>

      {isExpanded && (
        <div style={{
          display: 'flex',
          flexDirection: 'column',
          gap: '1.5rem',
          ...(isMobile && {
            maxHeight: '60vh',
            overflowY: 'auto',
            paddingRight: '1rem'
          })
        }}>
          {steps.map((step, index) => {
            const isComplete = index < currentStepIndex;
            const isCurrent = index === currentStepIndex;

            return (
              <div 
                key={step.path}
                style={{
                  position: 'relative',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '1rem'
                }}
              >
                <div style={{
                  width: '32px',
                  height: '32px',
                  borderRadius: '50%',
                  backgroundColor: isComplete ? 'var(--hover-color)' : 
                                 isCurrent ? 'var(--secondary-color)' : 'transparent',
                  border: '2px solid var(--secondary-color)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: (isComplete || isCurrent) ? 'white' : 'var(--secondary-color)',
                  transition: 'all 0.3s ease'
                }}>
                  {isComplete ? '✓' : step.icon}
                </div>

                <div style={{
                  display: 'flex',
                  flexDirection: 'column',
                  gap: '0.25rem'
                }}>
                  <span style={{
                    color: isCurrent ? 'var(--primary-color)' : 'var(--text-color)',
                    fontWeight: isCurrent ? '600' : '400',
                    opacity: isComplete ? 0.7 : 1
                  }}>
                    {step.label}
                  </span>
                  
                  <span style={{
                    fontSize: '0.75rem',
                    color: 'var(--text-color)',
                    opacity: 0.7
                  }}>
                    {isComplete ? 'Completed' : `Est: ${step.estimatedTime}`}
                  </span>

                  {isMobile && (
                    <span style={{
                      fontSize: '0.75rem',
                      color: 'var(--text-color)',
                      opacity: 0.7,
                      marginTop: '0.25rem'
                    }}>
                      {step.tooltip}
                    </span>
                  )}
                </div>

                {!isMobile && (
                  <div style={{
                    position: 'absolute',
                    left: '100%',
                    marginLeft: '1rem',
                    backgroundColor: '#2d3748',
                    color: 'white',
                    padding: '0.5rem 0.75rem',
                    borderRadius: '6px',
                    fontSize: '0.875rem',
                    opacity: 0,
                    visibility: 'hidden',
                    transition: 'all 0.2s ease',
                    whiteSpace: 'nowrap',
                    pointerEvents: 'none',
                    zIndex: 101
                  }}>
                    {step.tooltip}
                  </div>
                )}

                {index < steps.length - 1 && (
                  <div style={{
                    width: '2px',
                    height: '24px',
                    backgroundColor: isComplete ? 'var(--hover-color)' : 'var(--secondary-color)',
                    opacity: isComplete ? 1 : 0.3,
                    position: 'absolute',
                    left: '31px',
                    transform: 'translateY(28px)',
                    transition: 'all 0.3s ease'
                  }} />
                )}
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default WorkflowStepper;
--------------------------------------------------

File: src/components/Navbar.jsx
==================================================
import { useNavigate, useLocation } from 'react-router-dom';
import {
  Authenticated,
  Unauthenticated,
} from "convex/react";
import { SignInButton, SignUpButton, UserButton,SignedIn, SignedOut } from "@clerk/clerk-react";

export default function Navbar() {
  const navigate = useNavigate();
  const location = useLocation();

  return (
    <nav className="navbar">
      <div className="navbar-logo" onClick={() => navigate('/')}>
        <img 
          src="/Logo.png" 
          alt="PinnAI Logo" 
          style={{ height: '40px', cursor: 'pointer' }}
        />
      </div>
      <div className="navbar-links">
        <button 
          className={`nav-link ${location.pathname === '/' ? 'active' : ''}`}
          onClick={() => navigate('/')}
        >
          Home
        </button>
        <button 
          className={`nav-link ${location.pathname === '/dashboard' ? 'active' : ''}`}
          onClick={() => navigate('/dashboard')}
        >
          Dashboard
        </button>
        <button 
          className={`nav-link ${location.pathname === '/upload' ? 'active' : ''}`}
          onClick={() => navigate('/upload')}
        >
          Select Data
        </button>
         <button 
          className={`nav-link ${location.pathname === '/roi' ? 'active' : ''}`}
          onClick={() => navigate('/roi')}
        >
          ROI Calculator
        </button>
      </div>
      {/* ---------- Auth Controls ---------- */}
        <div className="navbar-auth flex items-center gap-2">
        {/* Avatar dropdown when signed-in */}
        <SignedIn>
          <UserButton afterSignOutUrl="/" />
        </SignedIn>

      </div>
    </nav>
  );
}
--------------------------------------------------

File: src/components/RequireAuth.jsx
==================================================
// components/RequireAuth.jsx
import { useUser } from "@clerk/clerk-react";
import { Navigate, useLocation } from "react-router-dom";

// Wrap any element in <RequireAuth> … </RequireAuth>
// and it will only render when the Clerk user is signed-in.
export default function RequireAuth({ children }) {
  const { isLoaded, isSignedIn } = useUser();
  const location = useLocation();

  // 1) Wait until Clerk finishes loading user data
  if (!isLoaded) return null;            // or return a spinner

  // 2) If signed-in → show protected content
  if (isSignedIn) return children;

  // 3) Otherwise bounce back to Landing
  //    `replace` keeps history tidy; `state` preserves where they came from.
  return <Navigate to="/" replace state={{ from: location }} />;
}

--------------------------------------------------

File: src/components/ModelTrainingModal.jsx
==================================================
import React from 'react';

export default function ModelTrainingModal({ onClose, onSelect, clusters, setClusters }) {
  return (
    <div
      style={{
        position: 'fixed',
        top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.5)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000
      }}
      onClick={onClose}
    >
      <div
        onClick={(e) => e.stopPropagation()}
        style={{
          backgroundColor: 'white',
          padding: '2rem',
          borderRadius: '10px',
          width: '320px',
          textAlign: 'center',
          boxShadow: '0 4px 10px rgba(0,0,0,0.2)'
        }}
      >
        <h3 style={{ marginBottom: '1rem' }}>Select Training Type</h3>

        <div style={{ marginBottom: '1rem' }}>
          <label style={{ fontSize: '0.9rem', marginBottom: '0.5rem', display: 'block' }}>Clusters for Unsupervised:</label>
          <select
            value={clusters}
            onChange={(e) => setClusters(Number(e.target.value))}
            style={{
              width: '100%',
              padding: '0.5rem',
              borderRadius: '6px',
              border: '1px solid #ccc',
              fontSize: '1rem'
            }}
          >
            {[2, 3, 4, 5, 6, 7, 8, 9, 10].map(n => (
              <option key={n} value={n}>{n} Clusters</option>
            ))}
          </select>
        </div>

       
        <button onClick={() => onSelect("supervised")} style={modalButtonStyle}>📊 Supervised</button>
        
        <div
          style={{ marginTop: '1rem', color: '#1976d2', cursor: 'pointer' }}
          onClick={onClose}
        >
          ❌ Close
        </div>
      </div>
    </div>
  );
}

const modalButtonStyle = {
  display: 'block',
  width: '100%',
  padding: '0.6rem',
  margin: '0.5rem 0',
  backgroundColor: '#f0f0f0',
  border: '1px solid #ccc',
  borderRadius: '6px',
  cursor: 'pointer',
  fontSize: '1rem'
};

--------------------------------------------------

File: src/pages/SupervisedAnalysisViewer.jsx
==================================================
import React from "react";
import VoxelViewer from "./VoxelViewerCore";

const SupervisedAnalysisViewer = () => {
  return <VoxelViewer />;
};

export default SupervisedAnalysisViewer;
--------------------------------------------------

File: src/pages/RawDataViewer.jsx
==================================================
import React from "react";
import VoxelViewerRaw from "./VoxelViewerRaw";

const RawDataViewer = () => {
  return <VoxelViewerRaw />;
};

export default RawDataViewer;
--------------------------------------------------

File: src/pages/FieldDetailsModal.jsx
==================================================
import React from 'react';

const fieldData = {
  "Campo Grande": {
    Location: "38 km from São Mateus",
    "Discovery Date": "May 1975",
    "Production Start": "August 2008",
    Wells: "10 drilled, 2 producing",
    Reservoir: "Turbiditic sandstone of the Urucutuca Formation",
    Porosity: "21%",
    Permeability: "Variable (affected by shale intercalations)",
    "Oil Gravity": "24° API",
    "Production Zones": "URUC10 (oil) and URUC20 (gas)",
  },
  "Córrego Dourado": {
    Location: "São Mateus Municipality",
    "Discovery Date": "May 1975",
    "Production Start": "August 2008",
    Wells: "8 drilled, 4 producing",
    Reservoir: "Fluviodeltaic sandstone of the Mariricu Formation",
    Porosity: "17%",
    Permeability: "100 millidarcys",
    "Oil Gravity": "13.6° API",
    "Primary Drive Mechanism": "Solution gas drive",
    "Enhanced Recovery": "Cyclic steam injection",
  }
};

export default function FieldDetailsModal({ fieldName, onClose }) {
  const data = fieldData[fieldName];

  return (
    <div style={{ padding: '2rem', textAlign: 'left', fontFamily: 'Arial, sans-serif' }}>
      <h2 style={{ textAlign: 'center', color: '#2c3e50' }}>{fieldName} Field Details</h2>
      {data ? (
        <div style={{ marginTop: '1rem', lineHeight: '1.6', fontSize: '1rem' }}>
          {Object.entries(data).map(([key, value]) => (
            <div key={key}><strong>{key}:</strong> {value}</div>
          ))}
        </div>
      ) : (
        <p>No details available for this field.</p>
      )}
      <div style={{ textAlign: 'center', marginTop: '2rem' }}>
        <button
          onClick={onClose}
          style={{
            background: 'red',
            color: 'white',
            padding: '0.5rem 1.5rem',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer'
          }}
        >
          Close
        </button>
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/CloudSiloSetup.jsx
==================================================
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

export default function CloudSiloSetup() {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    email: '',
    firstName: '',
    lastName: '',
    company: '',
    title: '',
    department: ''
  });
  const [showConfirmation, setShowConfirmation] = useState(false);

  // Load user info from registration when component mounts
  useEffect(() => {
    const savedUserInfo = localStorage.getItem('userRegistration');
    if (savedUserInfo) {
      const parsedInfo = JSON.parse(savedUserInfo);
      setForm(prevForm => ({
        ...prevForm,
        ...parsedInfo
      }));
    }
  }, []);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setShowConfirmation(true);
    // Store the potentially updated information
    localStorage.setItem('cloudSiloInfo', JSON.stringify(form));
    // Simulate sending credentials
    setTimeout(() => {
      navigate('/upload');
    }, 3000);
  };

  return (
    <div className="page-container">
      <h1>Secure Cloud Silo Setup</h1>
      
      {!showConfirmation ? (
        <div className="section">
          <p className="info-text">
            We'll set up your secure cloud silo and send temporary access credentials
            to your email. Please confirm or update your information below.
          </p>

          <form onSubmit={handleSubmit} className="register-form">
            <div className="form-group">
              <label htmlFor="email">
                Email to receive credentials <span className="required">*</span>
              </label>
              <input
                type="email"
                id="email"
                name="email"
                value={form.email}
                onChange={handleChange}
                required
                className="auto-populated"
              />
            </div>

            <div className="form-group">
              <label htmlFor="firstName">
                First Name <span className="required">*</span>
              </label>
              <input
                id="firstName"
                name="firstName"
                value={form.firstName}
                onChange={handleChange}
                required
                className="auto-populated"
              />
            </div>

            <div className="form-group">
              <label htmlFor="lastName">
                Last Name <span className="required">*</span>
              </label>
              <input
                id="lastName"
                name="lastName"
                value={form.lastName}
                onChange={handleChange}
                required
                className="auto-populated"
              />
            </div>

            <div className="form-group">
              <label htmlFor="company">
                Company Name <span className="required">*</span>
              </label>
              <input
                id="company"
                name="company"
                value={form.company}
                onChange={handleChange}
                required
                className="auto-populated"
              />
            </div>

            {/* Optional fields */}
            <div className="form-group">
              <label htmlFor="title">Title</label>
              <input
                id="title"
                name="title"
                value={form.title}
                onChange={handleChange}
                className="auto-populated"
              />
            </div>

            <div className="form-group">
              <label htmlFor="department">Department</label>
              <input
                id="department"
                name="department"
                value={form.department}
                onChange={handleChange}
                className="auto-populated"
              />
            </div>

            <div className="info-box">
              <h3>Important Security Information</h3>
              <ul>
                <li>Your secure silo will be set up within 15 minutes</li>
                <li>Temporary credentials will be sent to your email</li>
                <li>You must change your password upon first login</li>
                <li>Only you will have access to your data</li>
                <li>Data is encrypted at rest and in transit</li>
              </ul>
            </div>

            <button type="submit" className="button">
              Set Up My Secure Silo
            </button>
          </form>
        </div>
      ) : (
        <div className="section">
          <div className="confirmation-message">
            <div className="spinner"></div>
            <h2>Setting Up Your Secure Silo</h2>
            <p>
              We're preparing your secure cloud environment. You'll receive an email
              with temporary credentials shortly. Redirecting to file selection...
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

--------------------------------------------------

File: src/pages/Landing.jsx
==================================================
"use client";
import { useNavigate } from 'react-router-dom';
import {
  Authenticated,
  Unauthenticated,
} from "convex/react";
import { SignInButton, SignUpButton, UserButton, SignedIn, SignedOut } from "@clerk/clerk-react";


export default function Landing() {
  const navigate = useNavigate();

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-50">
      <img
    src="/Logo.png"          /* put your file path here */
    alt="Site logo"
    className="w-32 mb-6"    /* width + space below */
     />
      <main className="flex flex-col items-center justify-center flex-1 px-4 py-16">
        <h1 className="text-4xl font-bold mb-6 text-center">Math that drills</h1>

        <SignedIn>
          <p className="text-lg mb-4">Welcome! You're signed in.</p>
          <button
            onClick={() => navigate("/register")}
            className="bg-blue-600 text-white px-6 py-3 rounded-md text-lg hover:bg-blue-700"
          >
            Please fill more information ...
          </button>
        </SignedIn>

        <SignedOut>
          <div className="flex flex-col gap-4 w-80">
            <p className="text-center">Sign in or register to continue</p>
            <SignInButton mode="modal">
              <button className="bg-dark dark:bg-light text-light dark:text-dark text-sm px-4 py-2 rounded-md border-2">
                Sign In
              </button>
            </SignInButton>
            <SignUpButton mode="modal">
              <button className="bg-dark dark:bg-light text-light dark:text-dark text-sm px-4 py-2 rounded-md border-2">
                Sign Up
              </button>
            </SignUpButton>
          </div>
        </SignedOut>
      </main>
    </div>
  );
}
--------------------------------------------------

File: src/pages/SurfacePlot.jsx
==================================================
import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import Delaunator from 'delaunator';

const SurfacePlot = () => {
  const mountRef = useRef(null);

  useEffect(() => {
    const width = mountRef.current.clientWidth;
    const height = mountRef.current.clientHeight;

    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xffffff);
    const camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 1000);
    camera.position.set(0, 0, 2);

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, height);
    mountRef.current.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);

    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(0, 0, 5);
    scene.add(light);
    const ambient = new THREE.AmbientLight(0xffffff, 0.5);
    scene.add(ambient);

    Promise.all([
      fetch("/cumoil_surface.json").then(res => res.json()),
      fetch("/max_cumoil_path.json").then(res => res.json())
    ]).then(([data, pathData]) => {
      const vertices = data.map(p => [p.x - 0.5, p.y - 0.5, p.z - 0.5]);
      const flat2D = vertices.map(([x, y]) => [x, y]);

      const delaunay = Delaunator.from(flat2D);
      const geometry = new THREE.BufferGeometry();
      const positions = [];
      const colors = [];

      const cumoilValues = data.map(p => p.cumoil);
      const cumoilMin = Math.min(...cumoilValues);
      const cumoilMax = Math.max(...cumoilValues);

      for (let i = 0; i < delaunay.triangles.length; i += 3) {
        for (let j = 0; j < 3; j++) {
          const idx = delaunay.triangles[i + j];
          const [x, y, z] = vertices[idx];
          positions.push(x, y, z);

          const norm = (data[idx].cumoil - cumoilMin) / (cumoilMax - cumoilMin);
          const color = new THREE.Color().setHSL((1 - norm) * 0.7, 1.0, 0.7);
          colors.push(color.r, color.g, color.b);
        }
      }

      geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
      geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
      geometry.computeVertexNormals();

      const material = new THREE.MeshStandardMaterial({
        vertexColors: true,
        side: THREE.DoubleSide,
        flatShading: true,
      });

      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);

      // Add path as red line
      const pathPoints = pathData.map(p => new THREE.Vector3(p.x - 0.5, p.y - 0.5, p.z - 0.5));
      const pathGeometry = new THREE.BufferGeometry().setFromPoints(pathPoints);
      const pathMaterial = new THREE.LineBasicMaterial({ color: 0xff0000 });
      const pathLine = new THREE.Line(pathGeometry, pathMaterial);
      scene.add(pathLine);

      const axesHelper = new THREE.AxesHelper(0.2);
      axesHelper.position.set(-0.5, -0.5, -0.5);
      scene.add(axesHelper);

      animate();
    });

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };

    return () => {
      mountRef.current.removeChild(renderer.domElement);
    };
  }, []);

  return (
    <div style={{ width: '100%', height: '100vh' }}>
      <div
        style={{
          position: 'absolute',
          top: 10,
          left: 20,
          fontSize: '20px',
          fontWeight: 'bold',
          color: '#333',
          backgroundColor: 'rgba(255,255,255,0.8)',
          padding: '4px 8px',
          borderRadius: '8px'
        }}
      >
        Production Result: WELL CUMOIL
      </div>
      <div ref={mountRef} style={{ width: '100%', height: '100%' }} />
    </div>
  );
};

export default SurfacePlot;
--------------------------------------------------

File: src/pages/VoxelViewerRaw.jsx
==================================================
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { Slider, MenuItem, Select, FormControl, InputLabel } from "@mui/material";

const getRandomColor = () => Math.floor(Math.random() * 0xffffff);

const VoxelViewerRaw = () => {
  const mountRef = useRef(null);
  const [voxels, setVoxels] = useState([]);
  const [depthRange, setDepthRange] = useState([0, 15000]);
  const [latRange, setLatRange] = useState([30, 40]);
  const [longRange, setLongRange] = useState([-100, -90]);
  const [formationFilter, setFormationFilter] = useState("All");
  const [formationColors, setFormationColors] = useState({});

  useEffect(() => {
    fetch("/voxels_with_latlong_unk.json")
      .then((res) => res.json())
      .then((data) => {
        const voxelsData = data.voxels || [];
        const uniqueLabels = Array.from(new Set(voxelsData.map(v => v.label)));
        const colors = {};
        uniqueLabels.forEach(label => {
          colors[label] = getRandomColor();
        });
        setFormationColors(colors);
        setVoxels(voxelsData);
      });
  }, []);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xeeeeee);
    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 10000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    mountRef.current.innerHTML = "";
    mountRef.current.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(50, 100, 50);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    const filtered = voxels.filter((v) => {
      return (
        v.z >= depthRange[0] &&
        v.z <= depthRange[1] &&
        v.y >= latRange[0] &&
        v.y <= latRange[1] &&
        v.x >= longRange[0] &&
        v.x <= longRange[1] &&
        (formationFilter === "All" || v.label === formationFilter)
      );
    });

    const BOX_SIZE = 100;
    const xVals = filtered.map(v => v.x);
    const yVals = filtered.map(v => v.y);
    const zVals = filtered.map(v => v.z);
    const xMin = Math.min(...xVals), xMax = Math.max(...xVals);
    const yMin = Math.min(...yVals), yMax = Math.max(...yVals);
    const zMin = Math.min(...zVals), zMax = Math.max(...zVals);

    const scaledVoxels = filtered.map(v => ({
      ...v,
      scaledX: ((v.x - xMin) / (xMax - xMin || 1)) * BOX_SIZE,
      scaledY: ((v.y - yMin) / (yMax - yMin || 1)) * BOX_SIZE,
      scaledZ: ((v.z - zMin) / (zMax - zMin || 1)) * BOX_SIZE,
    }));

    const group = new THREE.Group();
    scaledVoxels.forEach((voxel) => {
      const color = formationColors[voxel.label] || 0xaaaaaa;
      const material = new THREE.MeshLambertMaterial({ color });
      const geometry = new THREE.BoxGeometry(1, 1, 1);
      const cube = new THREE.Mesh(geometry, material);
      cube.position.set(voxel.scaledX, voxel.scaledY, voxel.scaledZ);
      cube.userData = {
        label: voxel.label,
        original: `Lat: ${voxel.y.toFixed(2)}, Long: ${voxel.x.toFixed(2)}, Depth: ${voxel.z.toFixed(2)}`,
      };
      group.add(cube);
    });
    scene.add(group);

    const box = new THREE.Box3().setFromObject(group);
    const center = new THREE.Vector3();
    box.getCenter(center);
    camera.position.set(center.x + 50, center.y + 50, center.z + 50);
    controls.target.copy(center);
    controls.update();

    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    const tooltip = document.createElement("div");
    tooltip.style.position = "absolute";
    tooltip.style.padding = "4px 8px";
    tooltip.style.background = "rgba(0, 0, 0, 0.7)";
    tooltip.style.color = "white";
    tooltip.style.display = "none";
    tooltip.style.pointerEvents = "none";
    tooltip.style.borderRadius = "4px";
    document.body.appendChild(tooltip);

    const onMouseMove = (event) => {
      const rect = renderer.domElement.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(group.children);
      if (intersects.length > 0) {
        const data = intersects[0].object.userData;
        tooltip.innerHTML = `<b>${data.label}</b><br/>${data.original}`;
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.style.display = "block";
      } else {
        tooltip.style.display = "none";
      }
    };

    window.addEventListener("mousemove", onMouseMove);

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      window.removeEventListener("mousemove", onMouseMove);
      document.body.removeChild(tooltip);
      renderer.dispose();
    };
  }, [voxels, depthRange, latRange, longRange, formationFilter, formationColors]);

  const uniqueLabels = Array.from(new Set(voxels.map((v) => v.label)));

  return (
    <div>
      <div style={{ display: "flex", gap: "1rem", alignItems: "center", padding: "1rem" }}>
        <div>
          <div>Depth Range</div>
          <Slider
            value={depthRange}
            onChange={(e, val) => setDepthRange(val)}
            min={0}
            max={15000}
            step={100}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Lat Range</div>
          <Slider
            value={latRange}
            onChange={(e, val) => setLatRange(val)}
            min={30}
            max={40}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Long Range</div>
          <Slider
            value={longRange}
            onChange={(e, val) => setLongRange(val)}
            min={-100}
            max={-90}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <FormControl>
          <InputLabel>Formation</InputLabel>
          <Select
            value={formationFilter}
            onChange={(e) => setFormationFilter(e.target.value)}
            style={{ width: 120 }}
          >
            <MenuItem value="All">All</MenuItem>
            {uniqueLabels.map((label) => (
              <MenuItem key={label} value={label}>{label}</MenuItem>
            ))}
          </Select>
        </FormControl>
      </div>
      <div ref={mountRef} style={{ width: "100%", height: "80vh" }}></div>
      
    </div>
  );
};

export default VoxelViewerRaw;
--------------------------------------------------

File: src/pages/Terms.jsx
==================================================
export default function Terms() {
  return (
    <div className="page-container">
      <h1>Terms of Service</h1>
      <div className="section">
        <h2>Acceptance of Terms</h2>
        <p>By accessing and using Pinn AI's services, you accept and agree to be bound by these Terms of Service.</p>
        
        <h2>Use License</h2>
        <p>PinnAI grants you a limited, non-exclusive, non-transferable license to use our services in accordance with these terms.</p>
        
        <h2>Data Usage</h2>
        <p>You retain all rights to your data. By using our services, you grant us the right to process your data as necessary to provide our services.</p>
        
        {/* Add more terms of service content */}
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/AskImageQuestion.jsx
==================================================
import React, { useState } from 'react';

const AskImageQuestion = () => {
  const [question, setQuestion] = useState('');
  const [answer, setAnswer] = useState('');
  const [loading, setLoading] = useState(false);
  const [imageFile, setImageFile] = useState(null);
  const [iframeSrc, setIframeSrc] = useState(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setImageFile(file);
    if (file) {
      setIframeSrc(URL.createObjectURL(file));
    }
  };

  const handleLoadDemo = async () => {
    const response = await fetch('20.png');
    const blob = await response.blob();
    const file = new File([blob], '20.png', { type: blob.type });

    setImageFile(file);
    setIframeSrc(URL.createObjectURL(file));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!question.trim()) return;

    setLoading(true);
    setAnswer('');

    try {
      const response = await fetch('https://etscan.org/predict_permeability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ question }),
      });

      if (!response.ok) throw new Error('Server error');

      const data = await response.json();
      setAnswer(data.response || 'No answer returned.');
    } catch (error) {
      setAnswer('Error: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '2rem', maxWidth: '1400px', margin: '0 auto' }}>
      <h2 style={{ textAlign: 'center', fontSize: '2rem', fontWeight: 'bold', marginBottom: '2rem' }}>
        Ask About Vugs and Fractures
      </h2>

      <div style={{ display: 'flex', justifyContent: 'space-between', gap: '2rem' }}>
        {/* LEFT COLUMN */}
        <div style={{ width: '700px' }}>
          <div style={{ display: 'flex', gap: '1rem', marginBottom: '1rem' }}>
            <input type="file" accept="image/*" onChange={handleFileChange} />
            <button
              onClick={handleLoadDemo}
              style={{
                backgroundColor: '#1976d2',
                color: '#fff',
                border: 'none',
                padding: '0.5rem 1rem',
                borderRadius: '6px',
              }}
            >
              Load Demo Image
            </button>
          </div>

          <div
            style={{
              width: '700px',
              height: '350px',
              overflow: 'auto',
              border: '1px solid #ccc',
              borderRadius: '6px',
              background: '#fff',
            }}
          >
            {iframeSrc ? (
              <iframe
                src={iframeSrc}
                title="Seismic Preview"
                style={{ width: '1000px', height: '500px', border: 'none' }}
                scrolling="both"
              />
            ) : (
              <p style={{ padding: '2rem', textAlign: 'center', color: '#777' }}>No preview available</p>
            )}
          </div>
        </div>

        {/* RIGHT COLUMN */}
        <div style={{ width: '400px', alignSelf: 'flex-start' }}>
          <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
            <textarea
              placeholder="Type your question here"
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              rows={4}
              style={{
                padding: '0.75rem',
                fontSize: '1rem',
                borderRadius: '5px',
                border: '1px solid #ccc',
                resize: 'vertical',
                width: '100%',
                minHeight: '100px',
                fontFamily: 'inherit',
                lineHeight: '1.5',
              }}
            />
            <button
              type="submit"
              style={{
                padding: '0.75rem',
                fontSize: '1rem',
                backgroundColor: '#1976d2',
                color: '#fff',
                border: 'none',
                borderRadius: '5px',
              }}
            >
              Ask
            </button>
          </form>

          <div style={{ marginTop: '1rem', minHeight: '60px' }}>
            {loading ? (
              <p style={{ fontStyle: 'italic', color: '#555' }}>LLM thinking...</p>
            ) : (
              answer && <p style={{ color: 'green', fontWeight: 'bold' }}>{answer}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AskImageQuestion;

--------------------------------------------------

File: src/pages/ConvexChat.jsx
==================================================
import { useEffect, useState, useRef } from "react";
import { faker } from "@faker-js/faker";
import { useMutation, useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";

const NAME = getOrSetFakeName();
const BOT_NAME = "GeminiBot";

export default function ConvexChat() {
  const messages = useQuery(api.chat.listMessages) ?? [];
  const sendMessage = useMutation(api.chat.sendMessage);
  const [newMessageText, setNewMessageText] = useState("");
  const [visible, setVisible] = useState(true);
  const chatBoxRef = useRef(null);

  useEffect(() => {
    if (chatBoxRef.current) {
      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const userText = newMessageText.trim();
    if (!userText) return;

    await sendMessage({ user: NAME, body: userText });
    setNewMessageText("");

    try {
      const response = await fetch(`https://etscan.org/explain?prompt=${encodeURIComponent(userText)}`);
      const data = await response.json();

      if (data?.response) {
        await sendMessage({ user: BOT_NAME, body: data.response });
      } else {
        await sendMessage({ user: BOT_NAME, body: "Sorry, I couldn’t understand that." });
      }
    } catch (err) {
      await sendMessage({ user: BOT_NAME, body: "⚠️ Failed to fetch response from Gemini." });
    }
  };

  if (!visible) return null;

return (
  <div
    style={{
      width: '100%',
      height: 'auto',
      border: 'none',
      borderRadius: 0,
      backgroundColor: 'transparent',
      display: 'flex',
      flexDirection: 'column',
      fontFamily: 'Segoe UI, sans-serif',
      boxShadow: 'none',
    }}
  >
      <div
    style={{
      padding: '0.5rem 0',
      fontWeight: 600,
      fontSize: '1rem',
      color: '#444',
      marginBottom: '0.5rem',
    }}
>
      Ask me about optimal well placement and reservoir data!
    </div>

    <div
      ref={chatBoxRef}
      style={{
        padding: '1rem',
        overflowY: 'auto',
        maxHeight: 300,
        fontSize: '0.9rem',
        background: '#f9f9f9',
        border: '1px solid #eee',
        borderRadius: '6px',
        marginBottom: '1rem',
      }}
    >
      {messages.map((msg) => (
        <div
          key={msg._id}
          style={{
            backgroundColor: msg.user === NAME ? "#e6f4ff" : "#f0f0f0",
            padding: "0.6rem",
            marginBottom: "0.5rem",
            borderRadius: "6px",
            whiteSpace: "pre-wrap"
          }}
        >
          <strong>{msg.user === NAME ? "You" : "Bot"}:</strong>{" "}
          <span style={{ color: msg.user === NAME ? "#333" : "#007b83" }}>{msg.body}</span>
        </div>
      ))}
    </div>

    <form onSubmit={handleSubmit} style={{ display: "flex" }}>
      <input
        value={newMessageText}
        onChange={(e) => setNewMessageText(e.target.value)}
        placeholder="Ask a question..."
        style={{
          flex: 1,
          border: "1px solid #ccc",
          padding: "0.75rem",
          fontSize: "0.9rem",
          borderRadius: "6px 0 0 6px",
          outline: "none",
        }}
      />
      <button
        type="submit"
        disabled={!newMessageText}
        style={{
          backgroundColor: "#007bff",
          color: "#fff",
          border: "none",
          padding: "0 1rem",
          cursor: "pointer",
          fontWeight: "bold",
          borderRadius: "0 6px 6px 0",
        }}
      >
        Send
      </button>
    </form>
  </div>
);
}

function getOrSetFakeName() {
  const NAME_KEY = "tutorial_name";
  const name = sessionStorage.getItem(NAME_KEY);
  if (!name) {
    const newName = faker.person.firstName();
    sessionStorage.setItem(NAME_KEY, newName);
    return newName;
  }
  return name;
}

--------------------------------------------------

File: src/pages/scope.md
==================================================
**Scope Document: Earthscan SaaS Front-End Prototype**

**Objective:**
Create a clickable, front-end-only prototype of the Earthscan platform using React + Tailwind (or preferred stack) in Cursor. This prototype should visualize the user's journey from onboarding through data analysis results, incorporating placeholder content and navigation.

---

**Pages & Flow:**

1. **Landing / Login Page**
   - Title: "Earthscan – Platform Demo"
   - Tagline: "Math that drills deeper"
   - Register button → navigates to Register Page

2. **Register Page**
   - Form fields:
     - First Name*  
     - Last Name*  
     - Title  
     - Company Email*  
     - Company Name*  
     - Maximum number of wells to analyze (5 – 100,000)*  
     - Department
   - On Submit: sends email confirmation
   - On confirmation: redirect to Tier Selection Page

3. **Select Tier Package Page**
   - Tier Options:
     - Starter (up to 100 wells)
     - Essential (up to 300 wells)
     - Professional (up to 1,000 wells)
     - Enterprise (contact us)
   - Placeholder text: (INSERT LATIN HERE)
   - Highlights around:
     - Data copy options: user-hosted or PINN-hosted secure silo
     - Immediate data deletion after processing (user-first privacy)
     - Intelligent metrics generated based on uploaded data
     - Recommended data purchases from 3rd party vendor (placeholder)

4. **Data Upload Page**
   - This page is purely **visual** and does **not require actual data upload**.
   - Visuals:
     - A mock File Explorer or Finder window
     - Mouse cursor selects data files
     - User clicks "Upload" button to move to the next page
   - Purpose: Simulate ease of use and intuitive file selection process
   - Button: "Next"

5. **Third Party Data Vendor Page (Placeholder)**
   - Map of region with shaded leases (illustrative only)
   - List of available data types to purchase (no prices yet)
   - Button: "Next"

6. **Project Dashboard**
   - Summary of:
     - Wells uploaded
     - Completeness of data (mock visual)
   - Button: "Submit" (to begin analysis)

7. **Analysis Running Page**
   - Spinner or animation
   - Text: "Analyzing data..."

8. **Results Page**
   - Tabs:
     - Well Map / Lease Map (placeholder)
     - Reservoir Gradient (chart placeholder)
     - Frac Recipe Recommendation (text or chart placeholder)
     - Export/download button

9. **Settings / Account Page (Optional)**
   - Placeholder for future settings control

---

**General Notes:**
- No backend integration required
- Unlimited users per company assumed
- Navigation between pages should simulate real app feel
- Placeholder components for map, analytics, and charts OK
- Mobile responsive layout optional in this prototype phase
- No credit card required for trial access
- Free trial allows up to 100 wells processed

---

This document will guide the rapid prototyping of Earthscan's SaaS demo inside Cursor.


--------------------------------------------------

File: src/pages/VoxelViewerCore.jsx
==================================================
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { Slider, MenuItem, Select, FormControl, InputLabel } from "@mui/material";

const getRandomColor = () => Math.floor(Math.random() * 0xffffff);

const VoxelViewerCore = () => {
  const mountRef = useRef(null);
  const [voxels, setVoxels] = useState([]);
  const [depthRange, setDepthRange] = useState([0, 15000]);
  const [latRange, setLatRange] = useState([30, 40]);
  const [longRange, setLongRange] = useState([-100, -90]);
  const [formationFilter, setFormationFilter] = useState("All");
  const [formationColors, setFormationColors] = useState({});

  useEffect(() => {
    fetch("/voxels_with_latlong.json")
      .then((res) => res.json())
      .then((data) => {
        const voxelsData = data.voxels || [];
        const uniqueLabels = Array.from(new Set(voxelsData.map(v => v.label)));
        const colors = {};
        uniqueLabels.forEach(label => {
          colors[label] = getRandomColor();
        });
        setFormationColors(colors);
        setVoxels(voxelsData);
      });
  }, []);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xeeeeee);
    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 10000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    mountRef.current.innerHTML = "";
    mountRef.current.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(50, 100, 50);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    const filtered = voxels.filter((v) => {
      return (
        v.z >= depthRange[0] &&
        v.z <= depthRange[1] &&
        v.y >= latRange[0] &&
        v.y <= latRange[1] &&
        v.x >= longRange[0] &&
        v.x <= longRange[1] &&
        (formationFilter === "All" || v.label === formationFilter)
      );
    });

    const BOX_SIZE = 100;
    const xVals = filtered.map(v => v.x);
    const yVals = filtered.map(v => v.y);
    const zVals = filtered.map(v => v.z);
    const xMin = Math.min(...xVals), xMax = Math.max(...xVals);
    const yMin = Math.min(...yVals), yMax = Math.max(...yVals);
    const zMin = Math.min(...zVals), zMax = Math.max(...zVals);

    const scaledVoxels = filtered.map(v => ({
      ...v,
      scaledX: ((v.x - xMin) / (xMax - xMin || 1)) * BOX_SIZE,
      scaledY: ((v.y - yMin) / (yMax - yMin || 1)) * BOX_SIZE,
      scaledZ: ((v.z - zMin) / (zMax - zMin || 1)) * BOX_SIZE,
    }));

    const group = new THREE.Group();
    scaledVoxels.forEach((voxel) => {
      const color = formationColors[voxel.label] || 0xaaaaaa;
      const material = new THREE.MeshLambertMaterial({ color });
      const geometry = new THREE.BoxGeometry(1, 1, 1);
      const cube = new THREE.Mesh(geometry, material);
      cube.position.set(voxel.scaledX, voxel.scaledY, voxel.scaledZ);
      cube.userData = {
        label: voxel.label,
        original: `Lat: ${voxel.y.toFixed(2)}, Long: ${voxel.x.toFixed(2)}, Depth: ${voxel.z.toFixed(2)}`,
      };
      group.add(cube);
    });
    scene.add(group);

    const box = new THREE.Box3().setFromObject(group);
    const center = new THREE.Vector3();
    box.getCenter(center);
    camera.position.set(center.x + 50, center.y + 50, center.z + 50);
    controls.target.copy(center);
    controls.update();

    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    const tooltip = document.createElement("div");
    tooltip.style.position = "absolute";
    tooltip.style.padding = "4px 8px";
    tooltip.style.background = "rgba(0, 0, 0, 0.7)";
    tooltip.style.color = "white";
    tooltip.style.display = "none";
    tooltip.style.pointerEvents = "none";
    tooltip.style.borderRadius = "4px";
    document.body.appendChild(tooltip);

    const onMouseMove = (event) => {
      const rect = renderer.domElement.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(group.children);
      if (intersects.length > 0) {
        const data = intersects[0].object.userData;
        tooltip.innerHTML = `<b>${data.label}</b><br/>${data.original}`;
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.style.display = "block";
      } else {
        tooltip.style.display = "none";
      }
    };

    window.addEventListener("mousemove", onMouseMove);

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      window.removeEventListener("mousemove", onMouseMove);
      document.body.removeChild(tooltip);
      renderer.dispose();
    };
  }, [voxels, depthRange, latRange, longRange, formationFilter, formationColors]);

  const uniqueLabels = Array.from(new Set(voxels.map((v) => v.label)));

  return (
    <div>
      <div style={{ display: "flex", gap: "1rem", alignItems: "center", padding: "1rem" }}>
        <div>
          <div>Depth Range</div>
          <Slider
            value={depthRange}
            onChange={(e, val) => setDepthRange(val)}
            min={0}
            max={15000}
            step={100}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Lat Range</div>
          <Slider
            value={latRange}
            onChange={(e, val) => setLatRange(val)}
            min={30}
            max={40}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Long Range</div>
          <Slider
            value={longRange}
            onChange={(e, val) => setLongRange(val)}
            min={-100}
            max={-90}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <FormControl>
          <InputLabel>Formation</InputLabel>
          <Select
            value={formationFilter}
            onChange={(e) => setFormationFilter(e.target.value)}
            style={{ width: 120 }}
          >
            <MenuItem value="All">All</MenuItem>
            {uniqueLabels.map((label) => (
              <MenuItem key={label} value={label}>{label}</MenuItem>
            ))}
          </Select>
        </FormControl>
      </div>
      <div ref={mountRef} style={{ width: "100%", height: "80vh" }}></div>
      
    </div>
  );
};

export default VoxelViewerCore;
--------------------------------------------------

File: src/pages/VoxelViewer.jsx
==================================================
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import { FontLoader } from "three/examples/jsm/loaders/FontLoader";
import { TextGeometry } from "three/examples/jsm/geometries/TextGeometry";
import { Slider, MenuItem, Select, FormControl, InputLabel } from "@mui/material";

const getRandomColor = () => Math.floor(Math.random() * 0xffffff);

const VoxelViewer = () => {
  const mountRef = useRef(null);
  const [voxels, setVoxels] = useState([]);
  const [depthRange, setDepthRange] = useState([0, 15000]);
  const [latRange, setLatRange] = useState([30, 40]);
  const [longRange, setLongRange] = useState([-100, -90]);
  const [formationFilter, setFormationFilter] = useState("All");
  const [formationColors, setFormationColors] = useState({});

  useEffect(() => {
    fetch("/voxels_with_latlong.json")
      .then((res) => res.json())
      .then((data) => {
        const voxelsData = data.voxels || [];
        const uniqueLabels = Array.from(new Set(voxelsData.map(v => v.label)));
        const colors = {};
        uniqueLabels.forEach(label => {
          colors[label] = getRandomColor();
        });
        setFormationColors(colors);
        setVoxels(voxelsData);
      });
  }, []);

  useEffect(() => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xeeeeee);
    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 10000);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    mountRef.current.innerHTML = "";
    mountRef.current.appendChild(renderer.domElement);

    const controls = new OrbitControls(camera, renderer.domElement);
    const light = new THREE.DirectionalLight(0xffffff, 1);
    light.position.set(50, 100, 50);
    scene.add(light);
    scene.add(new THREE.AmbientLight(0x404040));

    const filtered = voxels.filter((v) => {
      return (
        v.z >= depthRange[0] &&
        v.z <= depthRange[1] &&
        v.y >= latRange[0] &&
        v.y <= latRange[1] &&
        v.x >= longRange[0] &&
        v.x <= longRange[1] &&
        (formationFilter === "All" || v.label === formationFilter)
      );
    });

    const BOX_SIZE = 100;
    const xVals = filtered.map(v => v.x);
    const yVals = filtered.map(v => v.y);
    const zVals = filtered.map(v => v.z);
    const xMin = Math.min(...xVals), xMax = Math.max(...xVals);
    const yMin = Math.min(...yVals), yMax = Math.max(...yVals);
    const zMin = Math.min(...zVals), zMax = Math.max(...zVals);

    const scaledVoxels = filtered.map(v => ({
      ...v,
      scaledX: ((v.x - xMin) / (xMax - xMin || 1)) * BOX_SIZE,
      scaledY: ((v.y - yMin) / (yMax - yMin || 1)) * BOX_SIZE,
      scaledZ: ((v.z - zMin) / (zMax - zMin || 1)) * BOX_SIZE,
    }));

    const group = new THREE.Group();
    scaledVoxels.forEach((voxel) => {
      const color = formationColors[voxel.label] || 0xaaaaaa;
      const material = new THREE.MeshLambertMaterial({ color });
      const geometry = new THREE.BoxGeometry(1, 1, 1);
      const cube = new THREE.Mesh(geometry, material);
      cube.position.set(voxel.scaledX, voxel.scaledY, voxel.scaledZ);
      cube.userData = {
        label: voxel.label,
        original: `Lat: ${voxel.y.toFixed(2)}, Long: ${voxel.x.toFixed(2)}, Depth: ${voxel.z.toFixed(2)}`,
      };
      group.add(cube);
    });
    scene.add(group);

    const box = new THREE.Box3().setFromObject(group);
    const center = new THREE.Vector3();
    box.getCenter(center);
    camera.position.set(center.x + 50, center.y + 50, center.z + 50);
    controls.target.copy(center);
    controls.update();

    // Tooltip setup
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    const tooltip = document.createElement("div");
    tooltip.style.position = "absolute";
    tooltip.style.padding = "4px 8px";
    tooltip.style.background = "rgba(0, 0, 0, 0.7)";
    tooltip.style.color = "white";
    tooltip.style.display = "none";
    tooltip.style.pointerEvents = "none";
    tooltip.style.borderRadius = "4px";
    document.body.appendChild(tooltip);

    const onMouseMove = (event) => {
      const rect = renderer.domElement.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      const intersects = raycaster.intersectObjects(group.children);
      if (intersects.length > 0) {
        const data = intersects[0].object.userData;
        tooltip.innerHTML = `<b>${data.label}</b><br/>${data.original}`;
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.style.display = "block";
      } else {
        tooltip.style.display = "none";
      }
    };
    window.addEventListener("mousemove", onMouseMove);

    // Axes mini scene with labels
    const axesScene = new THREE.Scene();
    const axesCamera = new THREE.PerspectiveCamera(50, 1, 1, 1000);
    axesCamera.up = camera.up;
    axesCamera.position.set(0, 0, 10);
    const axesHelper = new THREE.AxesHelper(5);
    axesScene.add(axesHelper);

    const fontLoader = new FontLoader();
    fontLoader.load("https://threejs.org/examples/fonts/helvetiker_regular.typeface.json", (font) => {
      const createLabel = (text, color, position) => {
        const geometry = new TextGeometry(text, {
          font,
          size: 0.5,
          height: 0.05,
        });
        const material = new THREE.MeshBasicMaterial({ color });
        const mesh = new THREE.Mesh(geometry, material);
        mesh.position.copy(position);
        axesScene.add(mesh);
      };

      createLabel("X", 0xff0000, new THREE.Vector3(5.5, 0, 0));
      createLabel("Y", 0x00ff00, new THREE.Vector3(0, 5.5, 0));
      createLabel("Z", 0x0000ff, new THREE.Vector3(0, 0, 5.5));
    });

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update();
      renderer.setViewport(0, 0, mountRef.current.clientWidth, mountRef.current.clientHeight);
      renderer.setScissorTest(false);
      renderer.render(scene, camera);

      // render axes helper in corner
      const size = 100;
      renderer.clearDepth();
      renderer.setScissorTest(true);
      renderer.setScissor(10, 10, size, size);
      renderer.setViewport(10, 10, size, size);
      axesCamera.quaternion.copy(camera.quaternion);
      renderer.render(axesScene, axesCamera);
      renderer.setScissorTest(false);
    };
    animate();

    return () => {
      window.removeEventListener("mousemove", onMouseMove);
      document.body.removeChild(tooltip);
      renderer.dispose();
    };
  }, [voxels, depthRange, latRange, longRange, formationFilter, formationColors]);

  const uniqueLabels = Array.from(new Set(voxels.map((v) => v.label)));

  return (
    <div>
      <div style={{ display: "flex", gap: "1rem", alignItems: "center", padding: "1rem" }}>
        <div>
          <div>Depth Range</div>
          <Slider
            value={depthRange}
            onChange={(e, val) => setDepthRange(val)}
            min={0}
            max={15000}
            step={100}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Lat Range</div>
          <Slider
            value={latRange}
            onChange={(e, val) => setLatRange(val)}
            min={30}
            max={40}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <div>
          <div>Long Range</div>
          <Slider
            value={longRange}
            onChange={(e, val) => setLongRange(val)}
            min={-100}
            max={-90}
            step={0.1}
            valueLabelDisplay="auto"
          />
        </div>
        <FormControl>
          <InputLabel>Formation</InputLabel>
          <Select
            value={formationFilter}
            onChange={(e) => setFormationFilter(e.target.value)}
            style={{ width: 120 }}
          >
            <MenuItem value="All">All</MenuItem>
            {uniqueLabels.map((label) => (
              <MenuItem key={label} value={label}>{label}</MenuItem>
            ))}
          </Select>
        </FormControl>
      </div>
      <div ref={mountRef} style={{ width: "100%", height: "80vh" }}></div>
    </div>
  );
};

export default VoxelViewer;

--------------------------------------------------

File: src/pages/ROIModal.jsx
==================================================
import React, { useState } from 'react';
import './ROIModal.css';

const plans = [
  {
    title: 'Starter',
    roi: '56.40%',
    wells: '25 to 75 wells',
    features: [
      'Basic analytics dashboard',
      'Email support',
      'Manual data input'
    ]
  },
  {
    title: 'Essential',
    roi: '62.88%',
    wells: '76 to 220 wells',
    features: [
      'Advanced analytics tools',
      'Priority email support',
      'Automated reporting'
    ],
    badge: 'Highest ROI'
  },
  {
    title: 'Premium',
    roi: '62.06%',
    wells: '221 to 350 wells',
    features: [
      'Full automation suite',
      'Phone and email support',
      'Customized dashboards'
    ]
  },
  {
    title: 'Enterprise',
    roi: '54.04%',
    wells: '350+ wells',
    features: [
      'Dedicated account manager',
      'Full API access',
      'Enterprise-grade analytics'
    ]
  }
];

const ROIModal = () => {
  const [wage, setWage] = useState('');
  const [hours, setHours] = useState(6);
  const [wells, setWells] = useState('');
  const [packageType, setPackageType] = useState('');
  const [result, setResult] = useState(null);

  const handleCalculate = async () => {
    try {
      const response = await fetch('https://etscan.org/calculate-roi', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          packageType,
          wage: parseFloat(wage),
          hours: parseFloat(hours),
          wells: parseInt(wells)
        })
      });

      if (!response.ok) throw new Error('Backend error');
      const data = await response.json();
      setResult(data);
    } catch (err) {
      alert('Calculation failed: ' + err.message);
    }
  };

  return (
    <div className="wrapper">
      <h1 className="title">ROI Pricing Plans</h1>
      <div className="plan-container">
        {plans.map((plan, idx) => (
          <div key={idx} className="plan-card">
            <div className="plan-title">{plan.title}</div>
            <div className="roi">{plan.roi} Cost Reduction</div>
            <div className="wells">Ideal for {plan.wells}</div>
            <ul className="features">
              {plan.features.map((f, i) => <li key={i}>{f}</li>)}
            </ul>
            {plan.badge && <div className="badge">{plan.badge}</div>}
          </div>
        ))}
      </div>

      <div className="calculator">
        <h2>ROI Calculator</h2>
        <select value={packageType} onChange={(e) => setPackageType(e.target.value)}>
          <option disabled value="">Select package</option>
          {plans.map(p => (
            <option key={p.title}>{p.title}</option>
          ))}
        </select>
        <input
          type="number"
          placeholder="Wage per hour"
          value={wage}
          onChange={e => setWage(e.target.value)}
        />
        <input
          type="number"
          placeholder="Total man hours per year"
          value={hours}
          onChange={e => setHours(e.target.value)}
        />
        <input
          type="number"
          placeholder="Number of Wells"
          value={wells}
          onChange={e => setWells(e.target.value)}
        />
        <button onClick={handleCalculate}>Calculate ROI</button>

        {result && (
          <div style={{ marginTop: '1rem', background: '#e9ffe9', padding: '1rem', borderRadius: '5px' }}>
            <p><strong>Manual Cost:</strong> ${result.manual_cost.toFixed(2)}</p>
            <p><strong>ROI:</strong> {result.roi_percent.toFixed(2)}%</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default ROIModal;

--------------------------------------------------

File: src/pages/ROIModal.css
==================================================
/* ROIModal.css */

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f8f9fa;
  margin: 0;
  padding: 2rem;
}

.title {
  text-align: center;
  margin-bottom: 2rem;
}

.plan-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1.5rem;
  justify-items: center;
}

.plan-card {
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  padding: 1.5rem;
  width: 100%;
  max-width: 260px;
  transition: transform 0.2s ease;
}

.plan-card:hover {
  transform: scale(1.05);
}

.plan-title {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 1rem;
  color: #333;
}

.roi {
  font-size: 1.8rem;
  font-weight: bold;
  color: #28a745;
}

.wells {
  font-size: 0.9rem;
  margin-top: 0.5rem;
  color: #555;
}

.features {
  margin-top: 1rem;
  padding-left: 1.2rem;
  font-size: 0.85rem;
  color: #444;
}

.features li {
  margin-bottom: 0.3rem;
}

.badge {
  display: inline-block;
  margin-top: 1rem;
  padding: 0.3rem 0.6rem;
  background-color: #ffc107;
  color: black;
  border-radius: 4px;
  font-size: 0.8rem;
}

.calculator {
  margin-top: 4rem;
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
  padding: 2rem;
  background-color: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.calculator input,
.calculator select,
.calculator button {
  display: block;
  width: 100%;
  margin-bottom: 1rem;
  padding: 0.6rem;
  font-size: 1rem;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.calculator button {
  background-color: #28a745;
  color: white;
  border: none;
  cursor: pointer;
  font-weight: bold;
}

.calculator button:hover {
  background-color: #218838;
}

--------------------------------------------------

File: src/pages/DualSurfacePlot.jsx
==================================================
import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import Delaunator from 'delaunator';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import {
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Typography
} from '@mui/material';

const interpolateSpline = (data, numPoints = 200) => {
  const curvePoints = data.map(p => new THREE.Vector3(p.x, p.y, p.z));
  const curve = new THREE.CatmullRomCurve3(curvePoints, false, 'catmullrom', 0.5);
  const cumoilValues = data.map(p => p.cumoil);
  const interpolated = [];
  for (let i = 0; i <= numPoints; i++) {
    const t = i / numPoints;
    const point = curve.getPoint(t);
    const cumoil = interpolateValue(cumoilValues, t);
    interpolated.push({ x: point.x, y: point.y, z: point.z, cumoil });
  }
  return interpolated;
};

const interpolateValue = (values, t) => {
  const scaledT = t * (values.length - 1);
  const i = Math.floor(scaledT);
  const f = scaledT - i;
  if (i >= values.length - 1) return values[values.length - 1];
  return values[i] * (1 - f) + values[i + 1] * f;
};

const createSurfaceMesh = (data) => {
  if (data.length < 10) data = interpolateSpline(data, 300);
  const vertices = data.map(p => [p.x - 0.5, p.y - 0.5, p.z - 0.5]);
  const flat2D = vertices.map(([x, y]) => [x, y]);
  const delaunay = Delaunator.from(flat2D);
  const geometry = new THREE.BufferGeometry();
  const positions = [], colors = [];
  const cumoilValues = data.map(p => p.cumoil);
  const cumoilMin = Math.min(...cumoilValues);
  const cumoilMax = Math.max(...cumoilValues);
  for (let i = 0; i < delaunay.triangles.length; i += 3) {
    for (let j = 0; j < 3; j++) {
      const idx = delaunay.triangles[i + j];
      const [x, y, z] = vertices[idx];
      positions.push(x, y, z);
      const norm = (data[idx].cumoil - cumoilMin) / (cumoilMax - cumoilMin);
      const color = new THREE.Color().setHSL((1 - norm) * 0.7, 1.0, 0.7);
      colors.push(color.r, color.g, color.b);
    }
  }
  geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
  geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
  geometry.computeVertexNormals();
  return new THREE.Mesh(geometry, new THREE.MeshStandardMaterial({
    vertexColors: true, side: THREE.DoubleSide, flatShading: true
  }));
};

const createLabel = (text, position) => {
  const canvas = document.createElement('canvas');
  canvas.width = 128;
  canvas.height = 64;
  const ctx = canvas.getContext('2d');
  ctx.fillStyle = 'black';
  ctx.font = 'bold 40px Arial';
  ctx.fillText(text, 32, 40);
  const texture = new THREE.CanvasTexture(canvas);
  const material = new THREE.SpriteMaterial({ map: texture, transparent: true });
  const sprite = new THREE.Sprite(material);
  sprite.scale.set(0.2, 0.1, 1);
  sprite.position.copy(position);
  return sprite;
};

const SurfacePanel = ({ dataUrl }) => {
  const mountRef = useRef(null);
  useEffect(() => {
    if (!mountRef.current) return;
    const width = mountRef.current.clientWidth;
    const height = mountRef.current.clientHeight;
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xfafafa);
    const camera = new THREE.PerspectiveCamera(60, width / height, 0.1, 1000);
    camera.position.set(0.5, 0.5, 3);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, height);
    mountRef.current.appendChild(renderer.domElement);
    scene.add(new THREE.DirectionalLight(0xffffff, 1).position.set(0, 0, 5));
    scene.add(new THREE.AmbientLight(0xffffff, 0.5));
    fetch(dataUrl)
      .then(res => res.json())
      .then(data => {
        const mesh = createSurfaceMesh(data);
        scene.add(mesh);
        const gridXZ = new THREE.GridHelper(2, 10);
        gridXZ.position.set(0, -0.5, 0);
        scene.add(gridXZ);
        const gridXY = new THREE.GridHelper(2, 10);
        gridXY.rotation.x = Math.PI / 2;
        gridXY.position.set(0, 0, -0.5);
        scene.add(gridXY);
        const gridYZ = new THREE.GridHelper(2, 10);
        gridYZ.rotation.z = Math.PI / 2;
        gridYZ.position.set(-0.5, 0, 0);
        scene.add(gridYZ);
        scene.add(new THREE.AxesHelper(1));
        scene.add(createLabel('Lat', new THREE.Vector3(1.1, 0, 0)));
        scene.add(createLabel('Long', new THREE.Vector3(0, 1.1, 0)));
        scene.add(createLabel('Dept', new THREE.Vector3(0, 0, 1.1)));
        const controls = new OrbitControls(camera, renderer.domElement);
        const animate = () => {
          requestAnimationFrame(animate);
          controls.update();
          renderer.render(scene, camera);
        };
        animate();
      });
    return () => {
      while (mountRef.current?.firstChild) {
        mountRef.current.removeChild(mountRef.current.firstChild);
      }
    };
  }, [dataUrl]);

  return <div ref={mountRef} className="w-full h-full" />;
};

const DualSurfacePlot = () => {
  const [resultPath, setResultPath] = useState([]);

  const handleSubmit = async (lat, lon) => {
    try {
      const response = await fetch('https://etscan.org/dijkstrainput', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ lat: parseFloat(lat), lon: parseFloat(lon) }),
      });
      if (!response.ok) throw new Error(`API error: ${response.status}`);
      const data = await response.json();
      console.log("API Response:", data);
      setResultPath(data.path || []);
    } catch (err) {
      console.error("Fetch error:", err);
    }
  };

  const InputSidebar = ({ onSubmit }) => {
    const [lat, setLat] = useState('');
    const [lon, setLon] = useState('');

    const handleFormSubmit = (e) => {
      e.preventDefault();
      onSubmit(lat, lon);
    };

    return (
      <div className="w-[300px] p-6 bg-white border-l border-gray-200 shadow-md">
        <h4 className="text-2xl font-bold text-slate-700 mb-6">Enter coordinates to optimize well placement</h4>
        <form onSubmit={handleFormSubmit} className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="latitude" className="text-sm font-medium text-gray-700">Latitude</label>
            <input
              id="latitude"
              type="number"
              value={lat}
              onChange={(e) => setLat(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm"
              placeholder="29.7604"
            />
          </div>
          <div className="space-y-2">
            <label htmlFor="longitude" className="text-sm font-medium text-gray-700">Longitude</label>
            <input
              id="longitude"
              type="number"
              value={lon}
              onChange={(e) => setLon(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm"
              placeholder="-95.3698"
            />
          </div>
          <button type="submit" className="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow">
            Submit
          </button>
        </form>
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex h-[75vh]">
        <div className="flex-1 flex flex-col">
          <div className="flex-1 border-b-2 border-gray-300">
            <SurfacePanel dataUrl="/cumoil_surface.json" />
          </div>
          <div className="flex-1">
            <SurfacePanel dataUrl="/max_cumoil_path.json" />
          </div>
        </div>
        <InputSidebar onSubmit={handleSubmit} />
      </div>

      <div className="w-full px-4 pb-4">
        <Typography variant="h6" className="font-bold text-blue-700 mb-2">
          <h4>Optimized Path Result</h4>
        </Typography>
        <div className="max-h-[300px] overflow-auto border border-gray-300 rounded-md shadow-sm">
          <TableContainer component={Paper} className="min-w-full">
            <Table stickyHeader size="small">
              <TableHead>
                <TableRow className="bg-gray-100">
                  <TableCell>#</TableCell>
                  <TableCell>Latitude (x)</TableCell>
                  <TableCell>Longitude (y)</TableCell>
                  <TableCell>Depth (z)</TableCell>
                  <TableCell>Cumoil</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {resultPath.map((point, index) => {
                  console.log(`Row ${index + 1}:`, point);
                  return (
                    <TableRow key={index}>
                      <TableCell>{index + 1}</TableCell>
                      <TableCell>{point.lat?.toFixed(2) ?? 'N/A'}</TableCell>
                      <TableCell>{point.lon?.toFixed(2) ?? 'N/A'}</TableCell>
                      <TableCell>{point.dept?.toFixed(2) ?? 'N/A'}</TableCell>
                      <TableCell>{point.cumoil?.toFixed(2) ?? 'N/A'}</TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        </div>
      </div>
    </div>
  );
};

export default DualSurfacePlot;

--------------------------------------------------

File: src/pages/ClassificationAgent.jsx
==================================================
import React, { useState } from 'react';
import well1Log from '../../public/S1.png';  // 858d3b...png (log image for Well-1)
import well2Log from '../../public/S2.png';     // log image for Well-2

export default function ClassificationAgent() {
  const [selectedWell, setSelectedWell] = useState(null);

  const cellStyle = {
    border: '2px solid black',
    padding: '10px',
    textAlign: 'center',
    cursor: 'pointer'
  };

  const handleClick = (wellName) => {
    setSelectedWell(wellName);
  };

  return (
    <div style={{ padding: '2rem' }}>
        <div style={{ display: 'flex', gap: '2rem', marginTop: '2rem', alignItems: 'flex-start' }}>
        {/* Main Classification Scatter Image */}
        <div style={{ flex: 1 }}>
          <img
            src= "https://etscan.org/show-image"
            alt="Classification Overview"
            style={{
              width: '100%',
              maxWidth: '600px',
              height: 'auto',
              border: '2px solid #000',
              borderRadius: '4px'
            }}
          />
        </div>

        {/* Well Confidence Table */}
        <div style={{ flex: 1 }}>
          <table style={{ borderCollapse: 'collapse', width: '100%' }}>
            <thead>
              <tr>
                <th style={cellStyle}>Well</th>
                <th style={cellStyle}>Confidence</th>
              </tr>
            </thead>
            <tbody>
              <tr onClick={() => handleClick('Well-1')}>
                <td style={cellStyle}>Well-1</td>
                <td style={cellStyle}>56.1</td>
              </tr>
              <tr onClick={() => handleClick('Well-2')}>
                <td style={cellStyle}>Well-2</td>
                <td style={cellStyle}>34.8</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      {/* Dynamic Log Plot Viewer */}
      {selectedWell && (
        <div style={{ marginTop: '2rem', textAlign: 'center' }}>
          <h3>{selectedWell} Log Plot</h3>
          <img
            src={selectedWell === 'Well-1' ? well2Log : well2Log}
            alt={`${selectedWell} log plot`}
            style={{
              width: '90%',
              maxWidth: '800px',
              border: '2px solid #000',
              borderRadius: '4px',
              marginTop: '1rem'
            }}
          />
        </div>
      )}
    </div>
  );
}


--------------------------------------------------

File: src/pages/ProductionDataViewer.jsx
==================================================
import React from "react";
import VoxelViewer from "./VoxelViewerCore";

const ProductionDataViewer = () => {
  return <VoxelViewer />;
};

export default ProductionDataViewer;
--------------------------------------------------

File: src/pages/VendorMap.jsx
==================================================
export default function VendorMap() {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen px-4 py-12 bg-white">
        <h2 className="text-2xl font-bold mb-4">Third-Party Data Vendors</h2>
        <p className="text-gray-600 mb-6">
          Here’s a placeholder map and list of datasets you could purchase.
        </p>
  
        <div className="w-full max-w-2xl border rounded-lg p-4 bg-gray-50 shadow">
          <ul className="list-disc list-inside space-y-2 text-gray-700">
            <li>Well logs for selected basin</li>
            <li>Production history for offset wells</li>
            <li>Geological tops dataset</li>
            <li>Fracture gradient models</li>
          </ul>
        </div>
  
        <button
          className="mt-6 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition"
          onClick={() => alert('Continuing to Dashboard...')}
        >
          Next
        </button>
      </div>
    );
  }
  
--------------------------------------------------

File: src/pages/DataUpload.jsx
==================================================
import { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { groupFilesByType } from '../utils';

export default function DataUpload() {
  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [showSubmit, setShowSubmit] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleFileSelect = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const files = Array.from(event.target.files);
    setSelectedFiles(prevFiles => [...prevFiles, ...files]);
    setShowSubmit(true);
  };

  const removeFile = (indexToRemove) => {
    setSelectedFiles(prevFiles => 
      prevFiles.filter((_, index) => index !== indexToRemove)
    );
    if (selectedFiles.length <= 1) {
      setShowSubmit(false);
    }
  };

  const handleSubmit = () => {
    setIsProcessing(true);
    // Group files by type and store in localStorage
    const fileTypes = groupFilesByType(selectedFiles);
    localStorage.setItem('uploadedFiles', JSON.stringify(fileTypes));
    
    // Simulate scanning process for 8 seconds
    setTimeout(() => {
      setIsProcessing(false);
      navigate('/dashboard');
    }, 8000);
  };

  return (
    <div className="page-container">
      <h1 className="text-center mb-6">Data Selection</h1>
      
      <div className="section">
        <div className="upload-container">
          {/* Hidden file input */}
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleFileChange}
            multiple
            style={{ display: 'none' }}
          />

          <div className="info-text">
            <ol>
              <li>If you have chosen to map to your data where it resides currently, our ingestion engine will scan the selected files, identify relevant data, 
              and create copies of the pertinent data. Your original files will not be moved or modified - they will remain exactly 
              as they are in their current location.</li>
              <li>If you selected Cloud-based silo storage, please proceed to the next page to select the data to be uploaded to your proprietary cloud storage.</li>
            </ol>
          </div>

          {/* Select Files button */}
          <button 
            onClick={handleFileSelect}
            className="button"
            disabled={isProcessing}
          >
            Select Files
          </button>

          {/* Selected Files Display */}
          {selectedFiles.length > 0 && (
            <div className="selected-files-container">
              <h3 className="mt-4 mb-2">Selected Files:</h3>
              <div className="file-list">
                {selectedFiles.map((file, index) => (
                  <div key={index} className="file-item">
                    <span className="file-icon">📄</span>
                    <span className="file-name">{file.name}</span>
                    <span className="file-size">
                      ({(file.size / 1024 / 1024).toFixed(2)} MB)
                    </span>
                    <button 
                      onClick={() => removeFile(index)}
                      className="remove-file-button"
                      disabled={isProcessing}
                    >
                      ✕
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Submit section */}
          {showSubmit && (
            <div className="submit-section">
              <p className="submit-text">
                When all files are selected, click "Submit" to begin scanning
              </p>
              <button 
                onClick={handleSubmit}
                className="button submit-button"
                disabled={isProcessing}
              >
                {isProcessing ? (
                  <div className="processing-container">
                    <div className="spinner"></div>
                    <span>Scanning files...</span>
                  </div>
                ) : 'Submit'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/WellMap.jsx
==================================================
"use client";

import React, { useState } from "react";
import RawDataViewer from "./RawDataViewer";
import WellLocation from "./WellLocation";
import ClassificationAgent from "./ClassificationAgent";
import {
  Tabs,
  Tab,
  Box,
  Typography,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Paper,
  Container,
} from "@mui/material";
import { ThemeProvider, createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#2563eb",
    },
  },
});

function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

export default function VoxelTabViewer() {
  const [tabValue, setTabValue] = useState(0);
  const [depthRange, setDepthRange] = useState([2000, 8000]);
  const [latRange, setLatRange] = useState([32, 34]);
  const [longRange, setLongRange] = useState([-102, -100]);
  const [formation, setFormation] = useState("All");

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  return (
    <ThemeProvider theme={theme}>
      <Container maxWidth="xl" className="py-6">
        <Paper elevation={0} className="bg-white">
          {/* Navigation Tabs */}
          <Box className="border-b border-gray-200">
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              className="px-6"
              sx={{
                "& .MuiTab-root": {
                  textTransform: "none",
                  fontWeight: 500,
                  fontSize: "0.875rem",
                  color: "#6b7280",
                  "&.Mui-selected": {
                    color: "#2563eb",
                  },
                },
                "& .MuiTabs-indicator": {
                  backgroundColor: "#2563eb",
                },
              }}
            >
              <Tab label="MAP LOCATION" />
              <Tab label="CLUSTER ANALYSIS" />
            </Tabs>
          </Box>

          {/* Tab Content */}
          <TabPanel value={tabValue} index={0}>
            <Paper elevation={1} className="bg-gray-50 rounded-lg overflow-auto" sx={{ height: 400 }}>
                <WellLocation />
              </Paper>

              <Box className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg max-w-4xl mx-auto">
                <Typography variant="body1" className="text-gray-700">
                  <span className="font-semibold text-blue-700">Answer:</span>{" "}
                  Displays the original well locations
                </Typography>
              </Box>
            
          </TabPanel>

          <TabPanel value={tabValue} index={1}>
            <Paper elevation={1} className="bg-gray-50 rounded-lg overflow-auto" sx={{ height: 400 }}>
                <ClassificationAgent />
              </Paper>
            <Box className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg max-w-4xl mx-auto">
                <Typography variant="body1" className="text-gray-700">
                  <span className="font-semibold text-blue-700">Answer:</span>{" "}
                  Displays clustering analysis of essentially the similiarity of wells.
                </Typography>
              </Box>
          </TabPanel>

        </Paper>
      </Container>
    </ThemeProvider>
  );
}

function RangeSlider({ label, value, setValue, min, max, step = 1 }) {
  return (
    <div className="min-w-[200px]">
      <Typography variant="body2" className="text-gray-700 mb-2 font-medium">
        {label}
      </Typography>
      <Slider
        value={value}
        onChange={(_, newValue) => setValue(newValue)}
        valueLabelDisplay="auto"
        min={min}
        max={max}
        step={step}
        className="text-blue-600"
        sx={{
          "& .MuiSlider-thumb": {
            backgroundColor: "#2563eb",
          },
          "& .MuiSlider-track": {
            backgroundColor: "#2563eb",
          },
          "& .MuiSlider-rail": {
            backgroundColor: "#e5e7eb",
          },
        }}
      />
    </div>
  );
}

function EmptyState({ title, subtitle }) {
  return (
    <div className="text-center py-12">
      <Typography variant="h6" className="text-gray-500">
        {title}
      </Typography>
      <Typography variant="body2" className="text-gray-400 mt-2">
        {subtitle}
      </Typography>
    </div>
  );
}

--------------------------------------------------

File: src/pages/Dashboard.jsx
==================================================
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import ModelTrainingModal from "../components/ModelTrainingModal";
import ConvexChat from "./ConvexChat";
import {
  Button,
  Card,
  CardContent,
  CardHeader,
  Typography,
  Grid,
  Paper,
  Box,
} from "@mui/material";
import {
  PlayArrow,
  Settings,
  BarChart,
  Map,
  FlashOn,
  Visibility,
  Chat,
  TrendingUp,
} from "@mui/icons-material";

function formatTimestamped(message) {
  const now = new Date();
  return `${now.toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
    second: "2-digit",
  })} - ${message}`;
}

export default function Dashboard() {
  const navigate = useNavigate();
  const [showProcessing, setShowProcessing] = useState(false);
  const [processingResult, setProcessingResult] = useState(null);
  const [pipelineLogs, setPipelineLogs] = useState([]);
  const [showTrainingModal, setShowTrainingModal] = useState(false);
  const [clusters, setClusters] = useState(3);
  const [showChat, setShowChat] = useState(false);

  useEffect(() => {
    console.log("🔧 Cluster state updated to:", clusters);
  }, [clusters]);

  const handleModelSelect = async (type) => {
    setShowTrainingModal(false);
    if (type === "unsupervised") {
      await handleROICalculate(clusters);
    }
  };

  const handleShowMap = () => navigate("/well-map");
  const handleAskImage = () => navigate("/ask-image");

  const handleROICalculate = async (clusterValue = clusters) => {
    setShowProcessing(true);
    setPipelineLogs([
      formatTimestamped("Files uploaded to folder."),
      formatTimestamped("Ingestion Agent triggered."),
      formatTimestamped("Extracting Formation Tops..."),
    ]);

    try {
      const response = await fetch("https://etscan.org/merge-well-formation");
      const data = await response.json();

      if (data.status === "success") {
        setPipelineLogs((prev) => [
          ...prev,
          formatTimestamped(`✅ Formation Tops extracted. Rows: ${data.rows}`),
          formatTimestamped(`📁 Output File: ${data.output}`),
          formatTimestamped("🧠 Triggering PCA Cluster..."),
        ]);

        const pcaResponse = await fetch("https://etscan.org/sparsity-check", {
          method: "POST",
        });
        const pcaData = await pcaResponse.json();

        if (pcaResponse.ok && pcaData.result) {
          setPipelineLogs((prev) => [
            ...prev,
            formatTimestamped(`Filtered data complete: ${pcaData.result}`),
            formatTimestamped(`Generating PCA plot on ${clusterValue} clusters`),
          ]);

          const plotResponse = await fetch("https://etscan.org/pca-plot/", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ cluster_number: clusterValue }),
          });

          const plotData = await plotResponse.json();

          if (plotResponse.ok && plotData.status === "success") {
            setPipelineLogs((prev) => [
              ...prev,
              formatTimestamped(`✅ ${plotData.message}`),
              formatTimestamped(`🖼️ Plot Path: ${plotData.plot_path}`),
            ]);
            setProcessingResult(plotData.result || null);
          } else {
            setPipelineLogs((prev) => [
              ...prev,
              formatTimestamped(`⚠️ PCA plot generation failed: ${JSON.stringify(plotData)}`),
            ]);
          }
        } else {
          setPipelineLogs((prev) => [
            ...prev,
            formatTimestamped(`⚠️ Filtered data failed: ${JSON.stringify(pcaData)}`),
          ]);
        }
      } else {
        setPipelineLogs((prev) => [
          ...prev,
          formatTimestamped(`API responded with status: ${data.status}`),
        ]);
      }
    } catch (error) {
      setPipelineLogs((prev) => [
        ...prev,
        formatTimestamped(`❌ API request failed: ${error.message}`),
      ]);
    }
    setShowProcessing(false);
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto" style={{ position: "relative" }}>
        <Typography variant="h4" className="text-blue-800 font-bold mb-4">
          Well Data Analysis Dashboard
        </Typography>

        {/* Floating Chat Box */}
        {showChat && (
          <Box
            sx={{
              position: "absolute",
              top: 20,
              right: 20,
              width: 360,
              zIndex: 1000,
            }}
          >
            <Card elevation={6}>
              {/* <CardHeader title="AI Chat Assistant" /> */}
              <CardContent>
                <ConvexChat />
              </CardContent>
            </Card>
          </Box>
        )}

        <Card className="mb-6 shadow-lg">
          <CardHeader
            title={
              <div className="flex items-center gap-2 text-blue-800">
                <BarChart /> Build Logs & Processing
              </div>
            }
          />
          <CardContent>
            <Box display="flex" gap={2} mb={2}>
              <Button
                variant="contained"
                startIcon={<PlayArrow />}
                onClick={() => handleROICalculate()}
                disabled={showProcessing}
              >
                {showProcessing ? "Processing..." : "Data Processing"}
              </Button>
              <Button
                variant="outlined"
                startIcon={<Settings />}
                onClick={() => setShowTrainingModal(true)}
              >
                Model Training
              </Button>
            </Box>

            {pipelineLogs.length > 0 && (
              <Box bgcolor="#f9f9f9" p={2} borderRadius={2} border="1px solid #ddd" mb={2}>
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  Pipeline Status
                </Typography>
                {pipelineLogs.map((log, idx) => (
                  <Typography key={idx} variant="body2">
                    {log}
                  </Typography>
                ))}
              </Box>
            )}

            {processingResult && (
              <Box bgcolor="#f0fdf4" p={2} borderRadius={2} border="1px solid #c6f6d5">
                <Typography variant="subtitle1" fontWeight={600} gutterBottom>
                  Processing Result
                </Typography>
                {Object.entries(processingResult).map(([key, value]) => (
                  <Typography key={key} variant="body2">
                    <strong>{key}:</strong> {Array.isArray(value) ? value.join(", ") : value}
                  </Typography>
                ))}
              </Box>
            )}
          </CardContent>
        </Card>

        {/* Four Feature Cards */}
        <Card className="mb-6 shadow-sm">
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Paper
                  onClick={handleShowMap}
                  elevation={0}
                  sx={{
                  p: 3,
                  borderRadius: 2,
                  backgroundColor: "#fff",
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  cursor: "pointer",
                  minHeight: 120,
                  boxShadow: 2,
                  transition: "all 0.3s ease-in-out",
                  "&:hover": {
                    boxShadow: 6,
                    transform: "scale(1.02)",
                    backgroundColor: "#f9f9f9",
                  },
                }}

                >
                  <Map sx={{ fontSize: 40, color: "#000" }} />
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600, color: "#000" }}>
                      Pattern Recognition
                    </Typography>
                    <Typography variant="body2" sx={{ color: "#333" }}>
                      Detects spatial and temporal similarities across wells.
                    </Typography>
                  </Box>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper
                  onClick={() => window.open("/digital-twin", "_blank")}
                  elevation={0}
                  sx={{
                  p: 3,
                  borderRadius: 2,
                  backgroundColor: "#fff",
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  cursor: "pointer",
                  minHeight: 120,
                  boxShadow: 2,
                  transition: "all 0.3s ease-in-out",
                  "&:hover": {
                    boxShadow: 6,
                    transform: "scale(1.02)",
                    backgroundColor: "#f9f9f9",
                  },
                }}

                >
                  <TrendingUp sx={{ fontSize: 40, color: "#000" }} />
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600, color: "#000" }}>
                      Sensitivity Report
                    </Typography>
                    <Typography variant="body2" sx={{ color: "#333" }}>
                      Reservoir productivity parameters analysis report.
                    </Typography>
                  </Box>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper
                  onClick={() => window.open("/voxel", "_blank")}
                  elevation={0}
                  sx={{
                  p: 3,
                  borderRadius: 2,
                  backgroundColor: "#fff",
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  cursor: "pointer",
                  minHeight: 120,
                  boxShadow: 2,
                  transition: "all 0.3s ease-in-out",
                  "&:hover": {
                    boxShadow: 6,
                    transform: "scale(1.02)",
                    backgroundColor: "#f9f9f9",
                  },
                }}

                >
                  <FlashOn sx={{ fontSize: 40, color: "#000" }} />
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600, color: "#000" }}>
                      Well Planning Insights
                    </Typography>
                    <Typography variant="body2" sx={{ color: "#333" }}>
                      Guides drilling with formation and production analysis.
                    </Typography>
                  </Box>
                </Paper>
              </Grid>

              <Grid item xs={12} md={6}>
                <Paper
                  onClick={handleAskImage}
                  elevation={0}
                  sx={{
                  p: 3,
                  borderRadius: 2,
                  backgroundColor: "#fff",
                  display: "flex",
                  alignItems: "center",
                  gap: 2,
                  cursor: "pointer",
                  minHeight: 120,
                  boxShadow: 2,
                  transition: "all 0.3s ease-in-out",
                  "&:hover": {
                    boxShadow: 6,
                    transform: "scale(1.02)",
                    backgroundColor: "#f9f9f9",
                  },
                }}

                >
                  <Visibility sx={{ fontSize: 40, color: "#000" }} />
                  <Box>
                    <Typography variant="h6" sx={{ fontWeight: 600, color: "#000" }}>
                      Vug Analysis
                    </Typography>
                    <Typography variant="body2" sx={{ color: "#333" }}>
                      Interpret porous zones using AI-enhanced inference.
                    </Typography>
                  </Box>
                </Paper>
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Chat Toggle Button */}
        <Box display="flex" justifyContent="flex-end" mb={2}>
          <Button
            variant="contained"
            startIcon={<Chat />}
            onClick={() => setShowChat(!showChat)}
            sx={{
              backgroundColor: "#1976d2",
              "&:hover": { backgroundColor: "#115293" },
              color: "#fff",
            }}
          >
            {showChat ? "Hide Chat" : "Chat Now!"}
          </Button>
        </Box>
      </div>

      {showTrainingModal && (
        <ModelTrainingModal
          onClose={() => setShowTrainingModal(false)}
          onSelect={handleModelSelect}
          clusters={clusters}
          setClusters={setClusters}
        />
      )}
    </div>
  );
}

--------------------------------------------------

File: src/pages/StorageSelection.jsx
==================================================
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

export default function StorageSelection() {
    const navigate = useNavigate();
    const [selectedOption, setSelectedOption] = useState('');
    const [showError, setShowError] = useState(false);
    
    const handleSelect = () => {
      if (!selectedOption) {
        setShowError(true);
        return;
      }
      setShowError(false);
      
      // Navigate based on selection
      if (selectedOption === 'local') {
        navigate('/upload');
      } else if (selectedOption === 'cloud') {
        navigate('/cloud-setup');
      }
    };
  
    return (
      <div className="page-container">
        <h1 className="text-center mb-6">Access your proprietary data</h1>
        <h1 className="text-center mb-6">Your proprietary data stays your proprietary data - details below</h1>
        <div className="section">
          <div className="option-container">
            <input
              type="radio"
              id="option1"
              name="dataAccess"
              value="local"
              checked={selectedOption === 'local'}
              onChange={(e) => {
                setSelectedOption(e.target.value);
                setShowError(false);
              }}
              className="option-radio"
            />
            <label htmlFor="option1" className="option-label">
              Option1:  Access your data through your typical means of storage
            </label>
          </div>

          <ol className="instruction-list">
            <li>
              On the next page, "Select" will open your "File Explorer" in Windows or "Finder" in Mac OS
            </li>
            <li>
              Select the data from any and all sources accessible through this selection box. 
              "Ctrl + A" or "Cmd + A" will select all data in a particular folder, or you can 
              select individual files.  You can select data from multiple sources.  When finished, click "Submit" 
            </li>
            <li>
              Any type of storage device accessible to your work station can be mapped including 
              cloud servers, local servers, thumb drives inserted into your workstation and the like.
            </li>
            <li>
              Select all files that may be relevant to your analysis. These file types of files virtually any text, (e.g. .LAS), seismic, .csv, spreadsheet, 
              google sheets, PDF's, hand written notes and more. Our system will evaluate them for qualityand 
              parse them into the proper locations.
            </li>
            <li>
              Although meta data from the AI analysis in the platform may be retained for audit 
              purposes or for your use when you return, this WILL NOT include any of your actual data, which will be deleted from our system after your session analysis, unless you choose otherwise.  
            </li>
            <li>
              When completed selecting all data, click "Submit" and this will save the mapping to 
              the platform.
            </li>
          </ol>
        </div>

        <div className="section">
          <div className="option-container">
            <input
              type="radio"
              id="option2"
              name="dataAccess"
              value="cloud"
              checked={selectedOption === 'cloud'}
              onChange={(e) => {
                setSelectedOption(e.target.value);
                setShowError(false);
              }}
              className="option-radio"
            />
            <label htmlFor="option2" className="option-label">
              Option 2: Use Pinn AI provided secure cloud storage
            </label>
          </div>
          <ol className="instruction-list">
            <li>
              The second way to make your data accessible is for Pinn AI to provide you with 
              a secure cloud based silo that only you will have access to. We set it up and send 
            you a temporary password which must be immediately changed. From there, only you have 
            access to your data in the secure encrypted silo provided by our cloud provider.
          </li>
          <li>
            Once you have your secure cloud silo set up, you can select your data directly as in Option1. 
            by selecting files from your computer, server or cloud storage. The data will be 
            encrypted during transfer and at rest.
          </li>
          <li>
            After uploading your data, you can proceed with the analysis. As with Option 1, any 
            meta data from the AI analysis may be retained, but your actual data will be deleted 
            after your session unless you choose otherwise.
          </li>
          <li>
            If you select this option, click "Continue" and you will be directed to set up your 
            secure cloud silo credentials.
          </li>
        </ol>
        </div>
        {showError && (
          <div className="terms-error-message">
            Please select a data access option to proceed.
          </div>
        )}

        <div className="text-center mt-6">
          <button
            onClick={handleSelect}
            className="button"
          >
            Continue
          </button>
        </div>
      </div>
    );
}
--------------------------------------------------

File: src/pages/upload-form.jsx
==================================================
"use client"

import { useState } from "react"
import {
  Typography,
  TextField,
  Button,
  FormControl,
  Select,
  MenuItem,
  RadioGroup,
  FormControlLabel,
  Radio,
  Dialog,
  DialogContent,
  IconButton,
  Box,
  Divider,
} from "@mui/material"
import { ThemeProvider, createTheme } from "@mui/material/styles"

const theme = createTheme({
  palette: {
    primary: {
      main: "#1976d2",
    },
    secondary: {
      main: "#f50057",
    },
  },
  components: {
    MuiTextField: {
      styleOverrides: {
        root: {
          "& .MuiOutlinedInput-root": {
            borderRadius: 12,
            backgroundColor: "#fafafa",
            "&:hover fieldset": {
              borderColor: "#1976d2",
            },
            "&.Mui-focused fieldset": {
              borderColor: "#1976d2",
              borderWidth: 2,
            },
          },
        },
      },
    },
    MuiSelect: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          backgroundColor: "#fafafa",
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          textTransform: "none",
          fontWeight: 600,
          padding: "12px 24px",
        },
      },
    },
  },
})

export default function UploadForm({ open, onClose, onUpload }) {
  const [formData, setFormData] = useState({
    name: "",
    slug: "",
    description: "",
    fileType: "Seismic",
    wellCoordinates: "Yes",
  })
  const [selectedFile, setSelectedFile] = useState(null)
  const [dragActive, setDragActive] = useState(false)

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }))
  }

  const handleFileChange = (event) => {
    const file = event.target.files[0]
    setSelectedFile(file)
    if (file && !formData.name) {
      setFormData((prev) => ({ ...prev, name: file.name.split(".")[0] }))
    }
  }

  const handleDrag = (e) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true)
    } else if (e.type === "dragleave") {
      setDragActive(false)
    }
  }

  const handleDrop = (e) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0]
      setSelectedFile(file)
      if (!formData.name) {
        setFormData((prev) => ({ ...prev, name: file.name.split(".")[0] }))
      }
    }
  }

  const handleCancel = () => {
    setFormData({
      name: "",
      slug: "",
      description: "",
      fileType: "Seismic",
      wellCoordinates: "Yes",
    })
    setSelectedFile(null)
    onClose()
  }

  const handleSave = () => {
    if (selectedFile && onUpload) {
      const fileData = {
        ...formData,
        file: selectedFile,
        fileName: selectedFile.name,
        fileSize: selectedFile.size,
        uploadDate: new Date().toISOString(),
      }
      onUpload(fileData)
    }
    handleCancel()
  }

  return (
    <ThemeProvider theme={theme}>
      <Dialog
        open={open}
        onClose={onClose}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 4,
            boxShadow: "0 20px 40px rgba(0,0,0,0.1)",
          },
        }}
      >
        <DialogContent sx={{ p: 0 }}>
          {/* Header */}
          <Box className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6 relative">
            <IconButton
              onClick={onClose}
              sx={{
                position: "absolute",
                right: 16,
                top: 16,
                color: "white",
                "&:hover": { backgroundColor: "rgba(255,255,255,0.1)" },
              }}
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </IconButton>
            <Typography variant="h4" className="font-bold mb-2">
              Upload Data File
            </Typography>
            <Typography variant="body1" className="opacity-90">
              Add geological data to your project
            </Typography>
          </Box>

          <Box className="p-8 space-y-8">
            {/* File Upload Zone */}
            <div
              className={`border-2 border-dashed rounded-2xl p-8 text-center transition-all duration-300 ${
                dragActive
                  ? "border-blue-500 bg-blue-50"
                  : selectedFile
                    ? "border-green-500 bg-green-50"
                    : "border-gray-300 hover:border-blue-400 hover:bg-gray-50"
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <input
                type="file"
                id="file-upload"
                onChange={handleFileChange}
                className="hidden"
                accept=".csv,.pdf,.seg,.docx,.xlsx,.txt"
              />

              {selectedFile ? (
                <div className="space-y-4">
                  <div className="w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center">
                    <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <div>
                    <Typography variant="h6" className="font-semibold text-gray-800">
                      {selectedFile.name}
                    </Typography>
                    <Typography variant="body2" className="text-gray-500">
                      {(selectedFile.size / (1024 * 1024)).toFixed(2)} MB
                    </Typography>
                  </div>
                  <Button variant="outlined" onClick={() => setSelectedFile(null)} size="small">
                    Remove File
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="w-16 h-16 mx-auto bg-blue-100 rounded-full flex items-center justify-center">
                    <svg className="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                      />
                    </svg>
                  </div>
                  <div>
                    <Typography variant="h6" className="font-semibold text-gray-800 mb-2">
                      Drop your file here, or{" "}
                      <label htmlFor="file-upload" className="text-blue-600 cursor-pointer hover:underline">
                        browse
                      </label>
                    </Typography>
                    <Typography variant="body2" className="text-gray-500">
                      Supports: CSV, PDF, SEG, DOCX, XLSX, TXT
                    </Typography>
                  </div>
                </div>
              )}
            </div>

            <Divider />

            {/* Form Fields */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Name Field */}
              <div className="space-y-2">
                <Typography variant="subtitle1" className="font-semibold text-gray-700">
                  File Name *
                </Typography>
                <TextField
                  fullWidth
                  value={formData.name}
                  onChange={(e) => handleInputChange("name", e.target.value)}
                  placeholder="Enter file name"
                  required
                />
              </div>

              {/* File Type */}
              <div className="space-y-2">
                <Typography variant="subtitle1" className="font-semibold text-gray-700">
                  File Type *
                </Typography>
                <FormControl fullWidth required>
                  <Select value={formData.fileType} onChange={(e) => handleInputChange("fileType", e.target.value)}>
                    <MenuItem value="Seismic">🌊 Seismic Data</MenuItem>
                    <MenuItem value="Well Log">🛢️ Well Log</MenuItem>
                    <MenuItem value="Production">📊 Production Data</MenuItem>
                    <MenuItem value="Geological">🗻 Geological Survey</MenuItem>
                    <MenuItem value="Geophysical">⚡ Geophysical Data</MenuItem>
                  </Select>
                </FormControl>
              </div>
            </div>

            {/* Slug Field */}
            <div className="space-y-2">
              <Typography variant="subtitle1" className="font-semibold text-gray-700">
                URL Slug
              </Typography>
              <TextField
                fullWidth
                value={formData.slug}
                onChange={(e) => handleInputChange("slug", e.target.value)}
                placeholder="auto-generated-from-filename"
                helperText="Leave empty to auto-generate from filename"
              />
            </div>

            {/* Description Field */}
            <div className="space-y-2">
              <Typography variant="subtitle1" className="font-semibold text-gray-700">
                Description
              </Typography>
              <TextField
                fullWidth
                multiline
                rows={3}
                value={formData.description}
                onChange={(e) => handleInputChange("description", e.target.value)}
                placeholder="Add a description for this file..."
              />
            </div>

            {/* Well Coordinates */}
            <div className="space-y-3">
              <Typography variant="subtitle1" className="font-semibold text-gray-700">
                Contains Well Coordinates *
              </Typography>
              <RadioGroup
                row
                value={formData.wellCoordinates}
                onChange={(e) => handleInputChange("wellCoordinates", e.target.value)}
                sx={{
                  "& .MuiFormControlLabel-root": {
                    backgroundColor: "#f8f9fa",
                    margin: "0 8px 0 0",
                    padding: "8px 16px",
                    borderRadius: "12px",
                    border: "2px solid transparent",
                    "&:hover": {
                      backgroundColor: "#e3f2fd",
                    },
                  },
                  "& .MuiFormControlLabel-root:has(.Mui-checked)": {
                    backgroundColor: "#e3f2fd",
                    borderColor: "#1976d2",
                  },
                }}
              >
                <FormControlLabel value="Yes" control={<Radio />} label="Yes" />
                <FormControlLabel value="No" control={<Radio />} label="No" />
              </RadioGroup>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end gap-4 pt-6">
              <Button variant="outlined" onClick={handleCancel} size="large">
                Cancel
              </Button>
              <Button
                variant="contained"
                onClick={handleSave}
                disabled={!selectedFile || !formData.name}
                size="large"
                sx={{
                  background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
                  boxShadow: "0 3px 5px 2px rgba(25, 118, 210, .3)",
                }}
              >
                Save & Upload
              </Button>
            </div>
          </Box>
        </DialogContent>
      </Dialog>
    </ThemeProvider>
  )
}

--------------------------------------------------

File: src/pages/Privacy.jsx
==================================================
export default function Privacy() {
  return (
    <div className="page-container">
      <h1>Privacy Policy</h1>
      <div className="section">
        <h2>Information Collection and Use</h2>
        <p>We collect information that you provide directly to us when you register for and use our services.</p>
        
        <h2>Data Storage and Security</h2>
        <p>Your data is stored securely and we implement appropriate technical and organizational measures to protect your information.</p>
        
        <h2>Information Sharing</h2>
        <p>We do not sell or share your personal information with third parties except as described in this policy.</p>
        
        {/* Add more privacy policy content */}
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/WellLocation.jsx
==================================================
import { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button, ButtonGroup, Typography } from '@mui/material';

export default function WellLocation() {
  const iframeRef = useRef(null);
  const [selectedData, setSelectedData] = useState([]);
  const [agentMessage, setAgentMessage] = useState('');
  const navigate = useNavigate();

  // Handle incoming data from iframe
  useEffect(() => {
    function handleMessage(event) {
      if (event?.data?.type === 'well-selection') {
        console.log('📥 Data received from iframe:', event.data.payload);
        setSelectedData(event.data.payload.data || []);
      }
    }

    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, []);

  // Handle agent suggestion based on selected data count
  const handleAgentClick = (type) => {
    const base = selectedData.length;
    const responses = {
      Regression: `Try Linear Regression or XGBoost.\nConfidence: ${Math.min(90, base * 1.5).toFixed(1)}%`,
      'Anomaly Detection': `Use Isolation Forest or Autoencoder.\nConfidence: ${Math.min(80, base).toFixed(1)}%`,
    };
    setAgentMessage(responses[type]);
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
      {/* Main Section: Map + Data */}
      <div style={{ display: 'flex', flex: 1 }}>
        {/* Plotly Map Iframe */}
        <iframe
          ref={iframeRef}
          src="https://etscan.org/output/plot.html"
          style={{ width: '70%', height: '100%', border: 'none' }}
          title="Well Location"
        />

        {/* Selected Data Panel */}
        <div style={{ width: '30%', padding: '1rem', background: '#f8f8f8', overflowY: 'auto' }}>
          <Typography variant="h6" gutterBottom>
            Selected Data Points
          </Typography>
          <Typography variant="body1">
            <strong>Count:</strong> {selectedData.length}
          </Typography>

          
        </div>
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/Register.jsx
==================================================
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

export default function Register() {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    firstName: '',
    lastName: '',
    title: '',
    email: '',
    company: '',
    wells: '',
    department: ''
  });
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [showError, setShowError] = useState(false);  // This controls the error message

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!agreedToTerms) {
      setShowError(true);  // Show error if terms not agreed
      return;
    }
    // If we get here, terms were agreed to
    
    // Store the registration data in localStorage
    localStorage.setItem('userRegistration', JSON.stringify(form));
    
    navigate('/tiers');
  };

  // Add console.log to debug
  console.log('showError:', showError);
  console.log('agreedToTerms:', agreedToTerms);

  return (
    <div className="register-form-container">
      <h2>Register for Access</h2>
      <form onSubmit={handleSubmit} className="register-form">
        <div className="form-group">
          <label htmlFor="firstName">
            First Name <span className="required">*</span>
          </label>
          <input 
            id="firstName" 
            name="firstName" 
            value={form.firstName} 
            onChange={handleChange} 
            required 
          />
        </div>

        <div className="form-group">
          <label htmlFor="lastName">
            Last Name <span className="required">*</span>
          </label>
          <input 
            id="lastName" 
            name="lastName" 
            value={form.lastName} 
            onChange={handleChange} 
            required 
          />
        </div>

        <div className="form-group">
          <label htmlFor="title">Title</label>
          <input 
            id="title" 
            name="title" 
            value={form.title} 
            onChange={handleChange} 
          />
        </div>

        <div className="form-group">
          <label htmlFor="email">
            Company Email <span className="required">*</span>
          </label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            value={form.email} 
            onChange={handleChange} 
            required 
          />
        </div>

        <div className="form-group">
          <label htmlFor="company">
            Company Name <span className="required">*</span>
          </label>
          <input 
            id="company" 
            name="company" 
            value={form.company} 
            onChange={handleChange} 
            required 
          />
        </div>

        <div className="form-group">
          <label htmlFor="wells">
            Max wells to analyze (5–100,000) <span className="required">*</span>
          </label>
          <input 
            id="wells" 
            name="wells" 
            value={form.wells} 
            onChange={handleChange} 
            required 
          />
        </div>

        <div className="form-group">
          <label htmlFor="department">Department</label>
          <input 
            id="department" 
            name="department" 
            value={form.department} 
            onChange={handleChange} 
          />
        </div>

        <div className="terms-container">
          <div className="checkbox-group">
            <input
              type="checkbox"
              id="terms"
              checked={agreedToTerms}
              onChange={(e) => {
                setAgreedToTerms(e.target.checked);
                if (e.target.checked) {
                  setShowError(false);  // Clear error when checkbox is checked
                }
              }}
              className="terms-checkbox"
            />
            <label htmlFor="terms" className="terms-label">
              I have read and agree to the{' '}
              <a 
                href="/terms" 
                target="_blank" 
                rel="noopener noreferrer"
                className="terms-link"
              >
                Terms of Service
              </a>
              {' '}and{' '}
              <a 
                href="/privacy" 
                target="_blank" 
                rel="noopener noreferrer"
                className="terms-link"
              >
                Privacy Policy
              </a>
            </label>
          </div>

          {/* Simplified error message condition */}
          {showError && (
            <div className="terms-error-message" style={{
              color: '#dc2626',
              fontSize: '0.95rem',
              marginTop: '0.5rem',
              fontWeight: '500',
              textAlign: 'left',
              padding: '0.5rem',
              backgroundColor: '#fee2e2',
              borderRadius: '4px',
              border: '1px solid #fecaca'
            }}>
              Please accept the Terms of Service and Privacy Policy.
            </div>
          )}
        </div>

        <button 
          type="submit" 
          style={{
            opacity: agreedToTerms ? 1 : 0.7,
            cursor: agreedToTerms ? 'pointer' : 'not-allowed'
          }}
        >
          Register
        </button>
      </form>
    </div>
  );
}
--------------------------------------------------

File: src/pages/DataSelection.jsx
==================================================
"use client";

import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import {
  Typography,
  Button,
  Card,
  CardContent,
  Chip,
  IconButton,
  Menu,
  MenuItem,
  Box,
  Avatar,
  Divider,
} from "@mui/material";
import { ThemeProvider, createTheme } from "@mui/material/styles";
import UploadForm from "./upload-form";

const theme = createTheme({
  palette: {
    primary: { main: "#1976d2" },
    secondary: { main: "#f50057" },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: { borderRadius: 12, textTransform: "none", fontWeight: 600 },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 16,
          boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
          transition: "all 0.3s ease",
          "&:hover": {
            transform: "translateY(-4px)",
            boxShadow: "0 8px 30px rgba(0,0,0,0.12)",
          },
        },
      },
    },
  },
});

export default function DataSelection() {
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [selectedFile, setSelectedFile] = useState(null);

  const [uploadedFiles, setUploadedFiles] = useState([
    {
      id: 1,
      filename: "Well_Log_1.csv",
      file_type: "Well Data",
      uploadDate: "2024-01-15",
      description: "Primary well logging data from site A-1",
      status: "processed",
    },
    {
      id: 2,
      filename: "Well_Summary.pdf",
      file_type: "Well Data",
      uploadDate: "2024-01-15",
      description: "Comprehensive well analysis report",
      status: "ready",
    },
    {
      id: 3,
      filename: "Seismic_Map_Inline.seg",
      file_type: "Seismic",
      uploadDate: "2024-01-14",
      description: "Inline seismic survey data - Block 7",
      status: "processing",
    },
    {
      id: 4,
      filename: "Seismic_Attribute_Report.docx",
      file_type: "Seismic",
      uploadDate: "2024-01-14",
      description: "Detailed seismic attribute analysis",
      status: "ready",
    },
  ]);

  /* ------------------------------------------------------------- */
  /* Fetch existing files from backend once                        */
  /* ------------------------------------------------------------- */
  useEffect(() => {
    const fetchFiles = async () => {
      try {
        const res = await fetch("https://etscan.org/files");
        const responseText = await res.text();
        console.log("Files fetch response:", responseText);
        if (res.ok) {
          const data = JSON.parse(responseText);
          setUploadedFiles((prev) => [...prev, ...data]);
        }
      } catch (error) {
        console.error("Failed to fetch uploaded files", error);
      }
    };
    fetchFiles();
  }, []);

  /* ------------------------------------------------------------- */
  /* Handle a new upload                                           */
  /* ------------------------------------------------------------- */
  const handleUpload = async (fileData) => {
    // fileData = { file, fileType, description }
    const formData = new FormData();
    formData.append("file", fileData.file);
    formData.append("file_type", fileData.fileType);

    try {
      const res = await fetch("https://etscan.org/upload", {
        method: "POST",
        body: formData,
      });

      const responseText = await res.text();
      console.log("Upload response:", responseText);

      if (res.ok) {
        const newFile = JSON.parse(responseText);

        const formattedFile = {
          id: uploadedFiles.length + 1,
          filename: newFile.filename,
          file_type: newFile.type || newFile.file_type,
          uploadDate: new Date().toISOString().split("T")[0],
          description: fileData.description || "No description",
          status: "processing",
        };

        setUploadedFiles((prev) => [...prev, formattedFile]);
      } else {
        console.error("Upload failed");
      }
    } catch (err) {
      console.error("Upload error:", err);
    }
  };

  /* ------------------------------------------------------------- */
  /* Context-menu helpers                                          */
  /* ------------------------------------------------------------- */
  const handleMenuClick = (event, file) => {
    setAnchorEl(event.currentTarget);
    setSelectedFile(file);
  };
  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedFile(null);
  };

  /* ------------------------------------------------------------- */
  /* UI helpers                                                    */
  /* ------------------------------------------------------------- */
  const getFileIcon = (fileName) => {
    if (!fileName) return { emoji: "📁", color: "#6b7280" };
    const ext = fileName.split(".").pop().toLowerCase();
    const icons = {
      csv:  { emoji: "📊", color: "#10b981" },
      pdf:  { emoji: "📄", color: "#ef4444" },
      seg:  { emoji: "🌊", color: "#8b5cf6" },
      docx: { emoji: "📝", color: "#3b82f6" },
      xlsx: { emoji: "📈", color: "#059669" },
    };
    return icons[ext] || { emoji: "📁", color: "#6b7280" };
  };

  /* ------------------------------------------------------------- */
  /* Group files by category                                       */
  /* ------------------------------------------------------------- */
  const groupedFiles = uploadedFiles.reduce((acc, file) => {
    const category = file.file_type === "Seismic" ? "Seismic Data" : "Well Data";
    (acc[category] ||= []).push(file);
    return acc;
  }, {});

  /* ------------------------------------------------------------- */
  /* Render                                                        */
  /* ------------------------------------------------------------- */
  return (
    <ThemeProvider theme={theme}>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
        {/* --- Top bar --- */}
        <Box className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-6 py-4 flex justify-between items-center">
            <div>
              <Typography variant="h4" className="font-bold text-gray-800">
                Data Management
              </Typography>
              <Typography variant="body1" className="text-gray-600 mt-1">
                Upload and manage your geological data files
              </Typography>
            </div>
            <Button
              variant="contained"
              onClick={() => setUploadDialogOpen(true)}
              startIcon={<span>+</span>}
              sx={{
                background: "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
                boxShadow: "0 3px 5px 2px rgba(25,118,210,.3)",
              }}
            >
              Upload Files
            </Button>
          </div>
        </Box>

        {/* --- Main grid --- */}
        <div className="max-w-7xl mx-auto p-6 grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left column ------------------------------------------------ */}
          <div className="lg:col-span-1">
            <Card className="sticky top-6">
              <CardContent className="p-6 space-y-4">
                <Typography variant="h6" className="font-bold text-gray-800">
                  Quick Actions
                </Typography>
                <Button fullWidth variant="outlined" onClick={() => setUploadDialogOpen(true)}>
                  Upload New File
                </Button>
                <Button fullWidth variant="outlined">Bulk Import</Button>
                <Button fullWidth variant="contained" component={Link} to="/dashboard">
                  View Dashboard
                </Button>
                <Button fullWidth variant="contained" component={Link} to="/texasmap">
                  Add more Data
                </Button>
                <Divider />
                <Typography variant="subtitle2">File Statistics</Typography>
                <div className="space-y-1 text-sm">
                  <div className="flex justify-between"><span>Total Files</span><span>{uploadedFiles.length}</span></div>
                  <div className="flex justify-between"><span>Well Data</span><span>{groupedFiles["Well Data"]?.length || 0}</span></div>
                  <div className="flex justify-between"><span>Seismic Data</span><span>{groupedFiles["Seismic Data"]?.length || 0}</span></div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right column ------------------------------------------------ */}
          <div className="lg:col-span-2 space-y-8">
            {Object.entries(groupedFiles).map(([category, files]) => (
              <div key={category}>
                {/* Section header */}
                <div className="flex items-center gap-3 mb-4">
                  <Avatar sx={{ bgcolor: category === "Well Data" ? "#1976d2" : "#9c27b0" }}>
                    {category === "Well Data" ? "🛢️" : "🌊"}
                  </Avatar>
                  <div>
                    <Typography variant="h5" className="font-bold">{category}</Typography>
                    <Typography variant="body2" className="text-gray-600">{files.length} files</Typography>
                  </div>
                </div>

                {/* File cards */}
                <div className="grid grid-cols-1 gap-4">
                  {files.map((file) => {
                    const icon = getFileIcon(file.filename);
                    return (
                      <Card key={file.id}>
                        <CardContent className="p-4 flex justify-between items-start">
                          <div className="flex gap-4 items-start">
                            <div
                              className="w-12 h-12 flex items-center justify-center text-2xl rounded-lg"
                              style={{ backgroundColor: `${icon.color}20` }}
                            >
                              {icon.emoji}
                            </div>
                            <div>
                              <Typography variant="h6" className="font-semibold truncate">
                                {file.filename}
                              </Typography>
                              <Typography variant="body2" className="text-gray-600">
                                {file.description || "No description"}
                              </Typography>
                              {/* Size removed → only show date */}
                              <div className="text-sm text-gray-500 mt-1">{file.uploadDate}</div>
                            </div>
                          </div>
                          <IconButton onClick={(e) => handleMenuClick(e, file)}>⋮</IconButton>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* --- Context menu --- */}
        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleMenuClose}>
          <MenuItem onClick={handleMenuClose}>View Details</MenuItem>
          <MenuItem onClick={handleMenuClose}>Download</MenuItem>
          <MenuItem onClick={handleMenuClose}>Edit</MenuItem>
          <Divider />
          <MenuItem onClick={handleMenuClose} sx={{ color: "error.main" }}>Delete</MenuItem>
        </Menu>

        {/* --- Upload dialog --- */}
        <UploadForm
          open={uploadDialogOpen}
          onClose={() => setUploadDialogOpen(false)}
          onUpload={handleUpload}
        />
      </div>
    </ThemeProvider>
  );
}

--------------------------------------------------

File: src/pages/Results.jsx
==================================================
import { useState } from 'react';

export default function Results() {
  const [tab, setTab] = useState('map');

  return (
    <div className="max-w-4xl mx-auto py-12 px-4">
      <h2 className="text-3xl font-bold mb-6 text-center">Results</h2>

      {/* Tabs */}
      <div className="flex space-x-4 justify-center mb-6">
        <button
          onClick={() => setTab('map')}
          className={`px-4 py-2 rounded ${tab === 'map' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
        >
          Well Map
        </button>
        <button
          onClick={() => setTab('gradient')}
          className={`px-4 py-2 rounded ${tab === 'gradient' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
        >
          Reservoir Gradient
        </button>
        <button
          onClick={() => setTab('frac')}
          className={`px-4 py-2 rounded ${tab === 'frac' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
        >
          Frac Recipe
        </button>
      </div>

      {/* Tab Content */}
      {tab === 'map' && (
        <div className="border p-6 rounded-xl shadow bg-gray-50 text-center">
          <p className="text-gray-700">[Placeholder for interactive Well / Lease Map]</p>
        </div>
      )}

      {tab === 'gradient' && (
        <div className="border p-6 rounded-xl shadow bg-gray-50 text-center">
          <p className="text-gray-700">[Placeholder for Reservoir Gradient Chart]</p>
        </div>
      )}

      {tab === 'frac' && (
        <div className="border p-6 rounded-xl shadow bg-gray-50 text-center">
          <p className="text-gray-700">Recommended Frac Recipe:</p>
          <ul className="mt-4 list-disc list-inside text-left text-gray-800">
            <li>Fluid: Slickwater + Friction Reducer</li>
            <li>Proppant: 100 Mesh + 40/70 Mix</li>
            <li>Rate: 90 bpm</li>
            <li>Stages: 24</li>
          </ul>
        </div>
      )}

      {/* Export Button */}
      <div className="text-center mt-8">
        <button className="bg-green-600 text-white px-6 py-3 rounded hover:bg-green-700 transition">
          Export Results
        </button>
      </div>
    </div>
  );
}

--------------------------------------------------

File: src/pages/cursor-scope.md
==================================================
# Earthscan SaaS Front-End Prototype — Cursor Build Scope

---

## 🧱 Project Structure


--------------------------------------------------

File: src/pages/VoxelTabViewer.jsx
==================================================
"use client";

import React, { useState } from "react";
import RawDataViewer from "./RawDataViewer";
import AnalysedDataViewer from "./AnalysedDataViewer";
import DualViewer from "./DualSurfacePlot";
import {
  Tabs,
  Tab,
  Box,
  Typography,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Paper,
  Container,
} from "@mui/material";
import { ThemeProvider, createTheme } from "@mui/material/styles";

const theme = createTheme({
  palette: {
    primary: {
      main: "#2563eb",
    },
  },
});

function TabPanel(props) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

export default function VoxelTabViewer() {
  const [tabValue, setTabValue] = useState(0);
  const [depthRange, setDepthRange] = useState([2000, 8000]);
  const [latRange, setLatRange] = useState([32, 34]);
  const [longRange, setLongRange] = useState([-102, -100]);
  const [formation, setFormation] = useState("All");

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  return (
    <ThemeProvider theme={theme}>
      <Container maxWidth="xl" className="py-6">
        <Paper elevation={0} className="bg-white">
          {/* Navigation Tabs */}
          <Box className="border-b border-gray-200">
            <Tabs
              value={tabValue}
              onChange={handleTabChange}
              className="px-6"
              sx={{
                "& .MuiTab-root": {
                  textTransform: "none",
                  fontWeight: 500,
                  fontSize: "0.875rem",
                  color: "#6b7280",
                  "&.Mui-selected": {
                    color: "#2563eb",
                  },
                },
                "& .MuiTabs-indicator": {
                  backgroundColor: "#2563eb",
                },
              }}
            >
              <Tab label="RAW DATA" />
              <Tab label="ANALYSED DATA" />
              <Tab label="WELL PLANNING" />
            </Tabs>
          </Box>

          {/* Tab Content */}
          <TabPanel value={tabValue} index={0}>
            <Paper elevation={1} className="bg-gray-50 rounded-lg overflow-auto" sx={{ height: 400 }}>
                <RawDataViewer />
              </Paper>

              <Box className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg max-w-4xl mx-auto">
                <Typography variant="body1" className="text-gray-700">
                  <span className="font-semibold text-blue-700">Answer:</span>{" "}
                  Displays the original dataset including spatial, geological information. UNK001 defines the unknown formations.
                </Typography>
              </Box>
            
          </TabPanel>

          <TabPanel value={tabValue} index={1}>
            <Paper elevation={1} className="bg-gray-50 rounded-lg overflow-auto" sx={{ height: 400 }}>
                <AnalysedDataViewer />
              </Paper>
            <Box className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg max-w-4xl mx-auto">
                <Typography variant="body1" className="text-gray-700">
                  <span className="font-semibold text-blue-700">Answer:</span>{" "}
                  Displays the original dataset including spatial, geological information. Unkown formations are analysed and is correlated with production data.
                </Typography>
              </Box>
          </TabPanel>

          <TabPanel value={tabValue} index={2}>
             <Paper elevation={1} className="bg-gray-50 rounded-lg overflow-auto" sx={{ height: 400 }}>
                <DualViewer />
              </Paper>
              <Box className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-r-lg max-w-4xl mx-auto">
                <Typography variant="body1" className="text-gray-700">
                  <span className="font-semibold text-blue-700">Answer:</span>{" "}
                  Displays the original production data. Unknown formations are analyzed and correlated with production data. You can create a well-drilling plan.
                </Typography>
              </Box>
          </TabPanel>
        </Paper>
      </Container>
    </ThemeProvider>
  );
}

function RangeSlider({ label, value, setValue, min, max, step = 1 }) {
  return (
    <div className="min-w-[200px]">
      <Typography variant="body2" className="text-gray-700 mb-2 font-medium">
        {label}
      </Typography>
      <Slider
        value={value}
        onChange={(_, newValue) => setValue(newValue)}
        valueLabelDisplay="auto"
        min={min}
        max={max}
        step={step}
        className="text-blue-600"
        sx={{
          "& .MuiSlider-thumb": {
            backgroundColor: "#2563eb",
          },
          "& .MuiSlider-track": {
            backgroundColor: "#2563eb",
          },
          "& .MuiSlider-rail": {
            backgroundColor: "#e5e7eb",
          },
        }}
      />
    </div>
  );
}

function EmptyState({ title, subtitle }) {
  return (
    <div className="text-center py-12">
      <Typography variant="h6" className="text-gray-500">
        {title}
      </Typography>
      <Typography variant="body2" className="text-gray-400 mt-2">
        {subtitle}
      </Typography>
    </div>
  );
}

--------------------------------------------------

File: src/pages/TierSelection.jsx
==================================================
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

// Add this new Tooltip component at the top of the file
const Tooltip = ({ text }) => (
  <div className="tooltip">
    <span className="tooltip-trigger">ⓘ</span>
    <div 
      className="tooltip-content"
      dangerouslySetInnerHTML={{ 
        __html: text
      }}
    />
  </div>
);

export default function TierSelection() {
    const navigate = useNavigate();
    const [selectedTier, setSelectedTier] = useState('');
    const [showError, setShowError] = useState(false);
    
    const handleSelect = () => {
      if (!selectedTier) {
        setShowError(true);
        return;
      }
      setShowError(false);
      navigate('/storage');  // Navigate to storage selection page
    };
  
    return (
      <div className="page-container">
        <h1 className="text-center mb-6">Select Your Tier Package</h1>
        
        <div className="tiers-container">
          {/* First Row */}
          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="starter-trial"
                name="tier"
                value="starter-trial"
                checked={selectedTier === 'starter-trial'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="starter-trial" className="tier-label">
                <h2>30-day Free Trial - 50 wells</h2>
                <p className="tier-limit">Up to 50 wells</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Select any set of wells you would like to analyze, up to 100 wells</p>
              <ul className="tier-features">
                <li>Data analysis on all well data types. Include production volumes (Oil, Gas, NGLs, Water.  OPEX (LOS preferable or LOE statements), water hauling charges/bbl or SWD fees/bbl, etc.</li>
                <li>Include .LAS, seismic (all file extensions), .CSV, .xlsx, Google sheets, PDF's, hand written notes and more. If it has your data, include it.</li>
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Basic data analysis</li>
                <li>Save, Export and Standard reporting disabled</li>
                <li>Onboarding support and feature training videos</li>
              </ul>
            </div>
          </div>

          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="starter-plus"
                name="tier"
                value="starter-plus"
                checked={selectedTier === 'starter-plus'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="starter-plus" className="tier-label">
                <h2>Starter Plus - 100 wells</h2>
                <p className="tier-limit">Up to 100 wells - $2,500/month + usage fees</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Select any set of wells you would like to analyze, up to 100 wells</p>
              <ul className="tier-features">
              <li>Everything in the Starter Package, plus;</li>
                
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Enhanced data analysis</li>
                <li>Save and Standard reporting enabled</li>
                <li>Onboarding support and feature training available</li>
                <li>24 hour turnaround email support</li>
              </ul>
            </div>
          </div>

          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="essential"
                name="tier"
                value="essential"
                checked={selectedTier === 'essential'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="essential" className="tier-label">
                <h2>Essential - 200 wells</h2>
                <p className="tier-limit">Up to 200 wells - $3,500/month + usage fees</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Select any set of wells you would like to analyze, up to 200 wells</p>
              <ul className="tier-features">
              <li>Everything in the Starter Plus Package, plus;</li>
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Advanced data analysis</li>
                <li>Custom reporting</li>
                <li>Priority support</li>
              </ul>
            </div>
          </div>

          {/* Second Row */}
          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="professional"
                name="tier"
                value="professional"
                checked={selectedTier === 'professional'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="professional" className="tier-label">
                <h2>Professional - 500 wells</h2>
                <p className="tier-limit">Up to 500 wells - $5,000/month + usage fees</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Select any set of wells you would like to analyze, up to 500 wells</p>
              <ul className="tier-features">
              <li>Everything in the Essential Package, plus;</li>
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Full data analysis suite</li>
                <li>Advanced analytics</li>
                <li>Optimal well location, HZ lateral depth, Recommende Frac recipies</li>
                <li>Custom Reporting and Export Options (PhDWin, ARIES, Petrel, Kingdom, etc.)</li>
                <li>24/7 premium support</li>
              </ul>
            </div>
          </div>

          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="premium"
                name="tier"
                value="premium"
                checked={selectedTier === 'premium'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="premium" className="tier-label">
                <h2>Premium - 1,000 wells</h2>
                <p className="tier-limit">Up to 1,000 wells - $10,000/month + usage fees</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Select any set of wells you would like to analyze, up to 5,000 wells</p>
              <ul className="tier-features">
              <li>Everything in the Professional Package, plus;</li>
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Full data analysis suite</li>
                <li>Advanced analytics</li>
                <li>Optimal well location, HZ lateral depth, Recommende Frac recipies</li>
                <li>Custom Reporting and Export Options (PhDWin, ARIES, Petrel, Kingdom, etc.)</li>
                <li>24/7 premium support</li>
              </ul>
            </div>
          </div>

          <div className="section tier-option">
            <div className="tier-header">
              <input
                type="radio"
                id="enterprise"
                name="tier"
                value="enterprise"
                checked={selectedTier === 'enterprise'}
                onChange={(e) => {
                  setSelectedTier(e.target.value);
                  setShowError(false);
                }}
                className="tier-radio"
              />
              <label htmlFor="enterprise" className="tier-label">
                <h2>Enterprise - Unlimited wells</h2>
                <p className="tier-limit">Unlimited wells - $15,000/month + usage fees</p>
              </label>
            </div>
            <div className="tier-content">
              <p>Custom solution for your enterprise needs</p>
              <ul className="tier-features">
              <li>Everything in Premium Package, plus;</li>
                <li className="feature-with-tooltip">
                <strong>Your proprietary data always stays in your control.  There are two options. Mouse over the tooltip for more information.</strong>
                  <Tooltip text={`<b>Option 1</b>: Select your data via your workstation.  Our system maps to your data where is resides without modifying in any way.  We make a copy of the pertinent data at your control when you submit for processing.  All copied data is deleted immediately after processing. You maintain control of your data at all times.

<b>Option 2</b>: Pinn AI secure cloud silo - At your selection (next page) we immediately create a cloud-based silo for your data.  Your data is encrypted and accessible only by you.  When setup is complete, your are emailed a temporary password that must be changed upon first login.  We never see your data nor do we have access to it.  As above, you select your data and it is uploaded into the silo for your use only.`} />
                </li>
                <li>Unlimited wells</li>
                <li>Custom integrations</li>
                <li>Dedicated support team</li>
                <li>Full data analysis suite</li>
                <li>Advanced analytics</li>
                <li>Optimal well location, HZ lateral depth, Recommende Frac recipies</li>
                <li>Custom Reporting and Export Options (PhDWin, ARIES, Petrel, Kingdom, etc.)</li>
                <li>24/7 premium support</li>
              </ul>
            </div>
          </div>
        </div>

        {showError && (
          <div className="terms-error-message">
            Please select a tier package to proceed.
          </div>
        )}

        <div className="text-center mt-6">
          <button
            onClick={handleSelect}
            className="button"
          >
            Continue
          </button>
        </div>
      </div>
    );
}
--------------------------------------------------

File: src/pages/TableA5View.jsx
==================================================
import React from 'react';

export default function TableA5View() {
  return (
    <div style={{ fontFamily: 'Arial, sans-serif', padding: 20, backgroundColor: '#f9f9f9' }}>
      <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: 14, marginBottom: 20 }}>
        <caption style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>
          TABLE A5 – Base Case: Proved Developed Producing Reserves and Future Net Revenue
        </caption>
        <thead>
          <tr style={{ backgroundColor: '#f2f2f2' }}>
            {[
              'Year', 'Oil (10³ bbl)', 'Gas (10⁶ ft³)', 'Oil Price (US$/bbl)', 'Gas Price (US$/10³ ft³)',
              'Gross Revenue (10³ US$)', 'Royalties (10³ US$)', 'Operating Exp. (10³ US$)', 'Capital Costs',
              'Abandonment', 'Indirect Taxes', 'Income Tax', 'Net Revenue (10³ US$)', 'Present Worth @10% (10³ US$)'
            ].map(header => (
              <th key={header} style={{ border: '1px solid #ccc', padding: 8 }}>{header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {[
            ['2024', '2,929.35', '0.00', '80.00', '-', '234,348', '20,713', '78,082', '0', '0', '253', '20,633', '114,667', '108,690'],
            ['2025', '2,494.32', '0.00', '75.00', '-', '187,074', '14,329', '64,943', '0', '0', '253', '16,401', '91,148', '78,208'],
            ['2026', '2,123.45', '0.00', '70.00', '-', '148,642', '11,278', '52,421', '0', '0', '253', '12,776', '71,914', '58,210'],
            ['2027', '1,832.10', '0.00', '68.00', '-', '124,583', '9,241', '45,320', '0', '0', '253', '10,314', '59,455', '44,970'],
            ['2028', '1,503.90', '0.00', '65.00', '-', '97,754', '7,033', '39,110', '0', '0', '253', '8,041', '43,317', '31,675'],
          ].map((row, rowIndex) => (
            <tr key={rowIndex}>
              {row.map((cell, colIndex) => (
                <td key={colIndex} style={{ border: '1px solid #ccc', padding: 8, textAlign: 'center' }}>{cell}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>

      <div style={{ display: 'flex', justifyContent: 'space-between', gap: 40 }}>
        <div style={{ fontSize: 13 }}>
          <strong>Notes:</strong>
          <ol>
            <li>
              Reserves were estimated only to the limits of economic production as defined under the
              Definition of Reserves heading of this report, or to the expiration dates of the concession
              extensions as advised by Seacrest Petroleo, whichever occurs first.
            </li>
            <li>
              Projected forecasts and estimated economic limits are estimated to occur after the expiration
              dates of the concession agreements. Seacrest Petroleo has represented that it will meet the
              conditions required by the ANP to obtain concession extensions. Based on this representation,
              and at Seacrest Petroleo’s request, the reserves evaluated herein consider the potential
              concession extensions.
            </li>
          </ol>
        </div>

        <div style={{ fontSize: 13 }}>
          <strong>Present Worth (10³ U.S.$) at:</strong>
          <table style={{ marginTop: 5 }}>
            <tbody>
              <tr><td>8 Percent</td><td style={{ textAlign: 'right' }}>374,711</td></tr>
              <tr><td>12 Percent</td><td style={{ textAlign: 'right' }}>343,824</td></tr>
              <tr><td>15 Percent</td><td style={{ textAlign: 'right' }}>322,515</td></tr>
              <tr><td>20 Percent</td><td style={{ textAlign: 'right' }}>290,735</td></tr>
            </tbody>
          </table>
        </div>
      </div>

      <a
        href="/downloads/Seacrest_CPR_TableA5_2023.pdf"
        download
        style={{
          backgroundColor: '#2e86c1',
          color: 'white',
          padding: '10px 20px',
          textDecoration: 'none',
          fontSize: 14,
          borderRadius: 5,
          display: 'inline-block',
          marginTop: 20
        }}
      >
        📥 Download Full Report (PDF)
      </a>
    </div>
  );
}


--------------------------------------------------

File: src/pages/Analysis.jsx
==================================================
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

export default function Analysis() {
  const navigate = useNavigate();

  // Simulate a delay before showing results
  useEffect(() => {
    const timer = setTimeout(() => {
      navigate('/results');
    }, 3000); // 3 seconds

    return () => clearTimeout(timer);
  }, [navigate]);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-white px-4">
      <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-opacity-75 mb-6"></div>
      <p className="text-xl text-gray-600">Analyzing your data…</p>
    </div>
  );
}

--------------------------------------------------

File: src/pages/TexasMap.jsx
==================================================
"use client";

import { useState } from "react";
import {
  Box,
  Typography,
  Button,
  TextField,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  InputAdornment,
} from "@mui/material";
import { MapContainer, TileLayer, CircleMarker, Tooltip } from "react-leaflet";
import SearchIcon from "@mui/icons-material/Search";
import StarIcon from "@mui/icons-material/Star";
import "leaflet/dist/leaflet.css";

// Dummy data
const mockSurveys = [
  { id: "s1", name: "Amendment FAN 3D", type: "3D Seismic" },
  { id: "s2", name: "Amendment Ph1 & 2 Elastic FWI", type: "3D Seismic" },
  { id: "s3", name: "CaribeSPAN", type: "2D Seismic" },
  { id: "s4", name: "Catcher 3D", type: "3D Seismic" },
  { id: "s5", name: "Engagement 3D", type: "3D Seismic" },
];

const mockDataPoints = [
  { id: "1", lat: 30.2672, lng: -97.7431, type: "seismic", intensity: 0.8 },
  { id: "2", lat: 29.7604, lng: -95.3698, type: "gravity", intensity: 0.6 },
  { id: "3", lat: 32.7767, lng: -96.797, type: "magnetic", intensity: 0.9 },
  { id: "4", lat: 29.4241, lng: -98.4936, type: "seismic", intensity: 0.7 },
];

export default function TexasMapWithSidebar({
  selectedLayers = ["seismic", "gravity", "magnetic"],
  onDataPointClick = () => {},
}) {
  const [search, setSearch] = useState("");

  const getColor = (type) => {
    switch (type) {
      case "seismic":
        return "#2196f3";
      case "gravity":
        return "#f44336";
      case "magnetic":
        return "#4caf50";
      default:
        return "#9e9e9e";
    }
  };

  const filteredSurveys = mockSurveys.filter((survey) =>
    survey.name.toLowerCase().includes(search.toLowerCase())
  );

  const filteredPoints = mockDataPoints.filter((pt) =>
    selectedLayers.includes(pt.type)
  );

  return (
    <Box sx={{ display: "flex", height: "100vh" }}>
      {/* Sidebar */}
      <Box
        sx={{
          width: 300,
          bgcolor: "white",
          borderRight: "1px solid #ddd",
          display: "flex",
          flexDirection: "column",
          p: 2,
        }}
      >
        <Button
          variant="outlined"
          fullWidth
          sx={{ mb: 2, textTransform: "none" }}
        >
          Filters &#x2699;
        </Button>

        <TextField
          fullWidth
          placeholder="Search Surveys"
          variant="outlined"
          size="small"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <SearchIcon fontSize="small" />
              </InputAdornment>
            ),
          }}
        />

        <List sx={{ flex: 1, overflowY: "auto", mt: 1 }}>
          {filteredSurveys.map((survey) => (
            <ListItem
              key={survey.id}
              sx={{ borderBottom: "1px solid #f0f0f0", cursor: "pointer" }}
            >
              <ListItemIcon>
                <StarIcon sx={{ color: "#2ecc71" }} />
              </ListItemIcon>
              <ListItemText
                primary={<Typography fontWeight={600}>{survey.name}</Typography>}
                secondary={survey.type}
              />
            </ListItem>
          ))}
        </List>

        <Divider sx={{ my: 1 }} />
        <Typography variant="caption" color="text.secondary">
          Showing results 1 - {filteredSurveys.length}
        </Typography>
      </Box>

      {/* Map */}
      <Box sx={{ flex: 1 }}>
        <MapContainer
          center={[31.0, -99.0]}
          zoom={6}
          style={{ width: "100%", height: "100%" }}
        >
          <TileLayer
            attribution='&copy; OpenStreetMap contributors'
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          />
          {filteredPoints.map((point) => (
            <CircleMarker
              key={point.id}
              center={[point.lat, point.lng]}
              radius={8}
              pathOptions={{
                color: getColor(point.type),
                fillOpacity: point.intensity,
              }}
              eventHandlers={{ click: () => onDataPointClick(point) }}
            >
              <Tooltip>{`${point.type} - Intensity: ${point.intensity}`}</Tooltip>
            </CircleMarker>
          ))}
        </MapContainer>
      </Box>
    </Box>
  );
}

--------------------------------------------------

File: src/pages/DigitalTwin.jsx
==================================================
import React, { useState } from 'react';
import TableA5View from './TableA5View';
import FieldDetailsModal from './FieldDetailsModal';

const modalStyle = {
  position: 'fixed',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  backgroundColor: 'rgba(0, 0, 0, 0.5)',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  zIndex: 1000
};

const modalContentStyle = {
  backgroundColor: '#fff',
  width: '90%',
  height: '90%',
  overflowY: 'scroll',
  borderRadius: '8px',
  position: 'relative',
  padding: '20px'
};

const closeButtonStyle = {
  position: 'absolute',
  top: 10,
  right: 10,
  background: 'red',
  color: 'white',
  border: 'none',
  borderRadius: '4px',
  padding: '0.5rem 1rem',
  cursor: 'pointer'
};

export default function DigitalTwin() {
  const [showSensitivity, setShowSensitivity] = useState(false);
  const [selectedField, setSelectedField] = useState(null);

  return (
    <>
      <div style={{ height: "100vh", width: "100vw", display: "flex", flexDirection: "column", background: "#f0f0f0" }}>
        {/* Header */}
        <div style={{ padding: "1rem", fontSize: "1.5rem", fontWeight: "bold" }}>
          Well Visualization and Well Sensitivity
        </div>

        {/* Main content: split into 60% left, 40% right */}
        <div style={{ flex: 1, display: "flex" }}>
          {/* Left side: video section */}
          <div style={{ flex: 6, background: "#fff", display: "flex", justifyContent: "center", alignItems: "center" }}>
            <video width="95%" height="95%" controls>
              <source src="SeismicSection3D.mp4" type="video/mp4" />
              Your browser does not support the video tag.
            </video>
          </div>

          {/* Right side: info panel */}
          <div style={{
            flex: 4,
            background: "#fafafa",
            padding: "1rem",
            display: "flex",
            flexDirection: "column",
            justifyContent: "space-between"
          }}>
            <div>
              <h3 style={{ marginBottom: "1rem" }}>Geological Properties by Field</h3>
              <table style={{ width: "100%", borderCollapse: "collapse", fontSize: "0.85rem" }}>
                <thead>
                  <tr style={{ backgroundColor: "#e0e0e0", textAlign: "left" }}>
                    <th style={{ padding: "5px" }}>Field</th>
                    <th style={{ padding: "5px" }}>Porosity (%)</th>
                    <th style={{ padding: "5px" }}>Permeability (mD)</th>
                    <th style={{ padding: "5px" }}>Oil API Gravity</th>
                  </tr>
                </thead>
                <tbody>
                  {[
                    { name: "Campo Grande", porosity: "21", permeability: "Variable (due to shale)", gravity: "24° API" },
                    { name: "Córrego Dourado", porosity: "17", permeability: "100", gravity: "13.6° API" },
                    { name: "Fazenda Alegre", porosity: "27", permeability: "500–2,000", gravity: "13° API" },
                    { name: "Fazenda São Rafael", porosity: "10–25", permeability: "1–1,000", gravity: "Not specified" },
                    { name: "São Mateus Leste", porosity: "12–21", permeability: "10–200", gravity: "16–32° API" },
                    { name: "Tabuiaiá", porosity: "11–20", permeability: "Low", gravity: "15.5–21.1° API" },
                  ].map(field => (
                    <tr
                      key={field.name}
                      onClick={() => setSelectedField(field.name)}
                      style={{ cursor: "pointer" }}
                    >
                      <td>{field.name}</td>
                      <td>{field.porosity}</td>
                      <td>{field.permeability}</td>
                      <td>{field.gravity}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Load Graph Button */}
            <div>
              <button
                onClick={() => setShowSensitivity(true)}
                style={{
                  width: "100%",
                  padding: "0.75rem",
                  background: "black",
                  color: "white",
                  border: "none",
                  borderRadius: "4px",
                  cursor: "pointer"
                }}
              >
                LOAD SENSITIVITY REPORT
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Modal for TableA5View (Sensitivity Report) */}
      {showSensitivity && (
        <div style={modalStyle}>
          <div style={modalContentStyle}>
            <button onClick={() => setShowSensitivity(false)} style={closeButtonStyle}>CLOSE</button>
            <TableA5View />
          </div>
        </div>
      )}

      {/* Modal for FieldDetailsModal (Row Click) */}
      {selectedField && (
        <div style={modalStyle}>
          <div style={modalContentStyle}>
            <FieldDetailsModal fieldName={selectedField} onClose={() => setSelectedField(null)} />
          </div>
        </div>
      )}
    </>
  );
}

--------------------------------------------------

File: src/pages/AnalysedDataViewer.jsx
==================================================
import React from "react";
import VoxelViewerCore from "./VoxelViewerCore";

const AnalysedDataViewer = () => {
  return <VoxelViewerCore />;
};

export default AnalysedDataViewer;
--------------------------------------------------

